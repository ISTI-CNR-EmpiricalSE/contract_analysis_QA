{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      text: null,\n      txt_file: null,\n      editing: false,\n      editText: null,\n      edited: \"false\"\n    };\n  },\n  methods: {\n    uploadFile() {\n      let formData = new FormData();\n      formData.append(\"file\", this.$refs.file.files[0]);\n      let file = this.$refs.file.files[0];\n      if (file.type === \"application/pdf\") {\n        axios.post(\"http://localhost:8000/api/pdf-upload/\", formData).then(response => {\n          this.text = response.data.pdf_text;\n          this.txt_file = response.data.txt_file_pdf;\n        }).catch(error => {\n          console.log(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\n        axios.post(\"http://localhost:8000/api/word-upload/\", formData).then(response => {\n          this.text = response.data.doc_text;\n          this.txt_file = response.data.txt_file_docx;\n        }).catch(error => {\n          console.log(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        axios.post(\"http://localhost:8000/api/xlsx-upload/\", formData).then(response => {\n          this.text = response.data.xlsx_text;\n          this.txt_file = response.data.txt_file_xlsx;\n        }).catch(error => {\n          console.log(error);\n        });\n      } else {\n        alert(\"Unsupported file type\");\n      }\n    },\n    updateText() {\n      axios.post(\"http://localhost:8000/api/update-text/\", {\n        text_toEdit: this.editText,\n        file_toEdit: this.txt_file,\n        edited: this.edited\n      }).then(response => {\n        this.text = this.editText;\n        this.txt_file = response.data.txt_file_edited;\n        this.editing = false;\n        this.edited = \"true\";\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","text","txt_file","editing","editText","edited","methods","uploadFile","formData","FormData","append","$refs","file","files","type","post","then","response","pdf_text","txt_file_pdf","catch","error","console","log","doc_text","txt_file_docx","xlsx_text","txt_file_xlsx","alert","updateText","text_toEdit","file_toEdit","txt_file_edited"],"sources":["src/components/ProvaEdit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <form @submit.prevent=\"uploadFile\">\r\n            <input type=\"file\" ref=\"file\" accept=\".pdf,.docx, .xlsx\" />\r\n            <button type=\"submit\">Upload</button>\r\n        </form>\r\n        <div v-if=\"text\">\r\n            <h2>Extracted text</h2>\r\n            <div>\r\n                <textarea v-if=\"!editing\" v-model=\"text\" style=\"width: 50%; height: 300px;\" readonly></textarea>\r\n                <textarea v-if=\"editing\" v-model=\"editText\" style=\"width: 50%; height: 300px;\"></textarea>\r\n                <button v-if=\"!editing\" @click=\"editText = text; editing = true\">Edit</button>\r\n                <button v-if=\"editing\" @click=\"updateText\">Save</button>\r\n                <button v-if=\"editing\" @click=\"editing = false\">Cancel</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            text: null,\r\n            txt_file: null,\r\n            editing: false,\r\n            editText: null,\r\n            edited: \"false\",\r\n        };\r\n    },\r\n    methods: {\r\n        uploadFile() {\r\n            let formData = new FormData();\r\n            formData.append(\"file\", this.$refs.file.files[0]);\r\n\r\n            let file = this.$refs.file.files[0];\r\n\r\n            if (file.type === \"application/pdf\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/pdf-upload/\", formData)\r\n                    .then(response => {\r\n                        this.text = response.data.pdf_text;\r\n                        this.txt_file = response.data.txt_file_pdf\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/word-upload/\", formData)\r\n                    .then(response => {\r\n                        this.text = response.data.doc_text;\r\n                        this.txt_file = response.data.txt_file_docx\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/xlsx-upload/\", formData)\r\n                    .then(response => {\r\n                        this.text = response.data.xlsx_text;\r\n                        this.txt_file = response.data.txt_file_xlsx\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                    });\r\n            } else {\r\n                alert(\"Unsupported file type\");\r\n            }\r\n        },\r\n        updateText() {\r\n            axios.post(\"http://localhost:8000/api/update-text/\", { text_toEdit: this.editText, file_toEdit: this.txt_file, edited: this.edited })\r\n                .then(response => {\r\n                    this.text = this.editText;\r\n                    this.txt_file = response.data.txt_file_edited;\r\n                    this.editing = false;\r\n                    this.edited = \"true\"\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"AAoBA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,QAAA;MACAC,OAAA;MACAC,QAAA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,IAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAAC,KAAA,CAAAC,IAAA,CAAAC,KAAA;MAEA,IAAAD,IAAA,QAAAD,KAAA,CAAAC,IAAA,CAAAC,KAAA;MAEA,IAAAD,IAAA,CAAAE,IAAA;QACAf,KAAA,CACAgB,IAAA,0CAAAP,QAAA,EACAQ,IAAA,CAAAC,QAAA;UACA,KAAAhB,IAAA,GAAAgB,QAAA,CAAAjB,IAAA,CAAAkB,QAAA;UACA,KAAAhB,QAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAAmB,YAAA;QACA,GACAC,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA,WAAAT,IAAA,CAAAE,IAAA,kFAAAF,IAAA,CAAAE,IAAA;QACAf,KAAA,CACAgB,IAAA,2CAAAP,QAAA,EACAQ,IAAA,CAAAC,QAAA;UACA,KAAAhB,IAAA,GAAAgB,QAAA,CAAAjB,IAAA,CAAAwB,QAAA;UACA,KAAAtB,QAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAAyB,aAAA;QAEA,GACAL,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA,WAAAT,IAAA,CAAAE,IAAA;QACAf,KAAA,CACAgB,IAAA,2CAAAP,QAAA,EACAQ,IAAA,CAAAC,QAAA;UACA,KAAAhB,IAAA,GAAAgB,QAAA,CAAAjB,IAAA,CAAA0B,SAAA;UACA,KAAAxB,QAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAA2B,aAAA;QACA,GACAP,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;QACA;MACA;QACAO,KAAA;MACA;IACA;IACAC,WAAA;MACA9B,KAAA,CAAAgB,IAAA;QAAAe,WAAA,OAAA1B,QAAA;QAAA2B,WAAA,OAAA7B,QAAA;QAAAG,MAAA,OAAAA;MAAA,GACAW,IAAA,CAAAC,QAAA;QACA,KAAAhB,IAAA,QAAAG,QAAA;QACA,KAAAF,QAAA,GAAAe,QAAA,CAAAjB,IAAA,CAAAgC,eAAA;QACA,KAAA7B,OAAA;QACA,KAAAE,MAAA;MACA,GACAe,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}