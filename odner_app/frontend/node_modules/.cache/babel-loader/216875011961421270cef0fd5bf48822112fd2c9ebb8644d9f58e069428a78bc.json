{"ast":null,"code":"import axios from \"axios\"; /* a Javascript library used to make HTTP requests from node. js;  It can be used intercept HTTP requests and responses  */\n\nexport default {\n  data() {\n    return {\n      text: null,\n      txt_file: null,\n      editing: false,\n      editText: null,\n      file_uploaded: null,\n      language: \"it\",\n      dictionaryObj: null,\n      selectedEntities: [],\n      todelete_entities: [],\n      high_text: null,\n      loaded: false,\n      colors: [],\n      high_entities: [],\n      available_configs_en: [],\n      available_configs_it: [],\n      config_to_change: null,\n      question: null,\n      model_choosen: null,\n      model_available_en: ['deepset/roberta-base-squad2', 'distilbert-base-cased-distilled-squad', 'bert-large-uncased-whole-word-masking-finetuned-squad', 'squirro/albert-base-v2-squad_v2', 'ahotrod/electra_large_discriminator_squad2_512'],\n      model_available_it: ['anakin87/electra-italian-xxl-cased-squad-it'],\n      answer: null,\n      show_modal: false,\n      file_config: null,\n      model_entity: null,\n      name_entity: null,\n      new_config: false,\n      name_new_config: null,\n      code: 0,\n      show_confirm_delete: false\n    };\n  },\n  methods: {\n    uploadFile() {\n      let formData = new FormData();\n      formData.append(\"file\", this.$refs.file.files[0]);\n      formData.append(\"language\", this.language);\n      let file = this.$refs.file.files[0];\n      if (file.type === \"application/pdf\") {\n        axios.post(\"http://localhost:8000/api/pdf-upload/\", formData).then(response => {\n          if (this.language == 'it') {\n            this.text = response.data.pdf_text_it;\n            this.txt_file = response.data.txt_file_pdf_it;\n          } else {\n            this.text = response.data.pdf_text_en;\n            this.txt_file = response.data.txt_file_pdf_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\n        axios.post(\"http://localhost:8000/api/word-upload/\", formData).then(response => {\n          if (this.language === 'it') {\n            this.text = response.data.docx_text_it;\n            this.txt_file = response.data.txt_file_docx_it;\n          } else {\n            this.text = response.data.docx_text_en;\n            this.txt_file = response.data.txt_file_docx_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        axios.post(\"http://localhost:8000/api/xlsx-upload/\", formData).then(response => {\n          if (this.language === 'it') {\n            this.text = response.data.xlsx_text_it;\n            this.txt_file = response.data.txt_file_xlsx_it;\n          } else {\n            this.text = response.data.xlsx_text_en;\n            this.txt_file = response.data.txt_file_xlsx_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else {\n        alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\n      }\n      axios.post(\"http://localhost:8000/api/get-config/\", {\n        'language': this.language\n      }).then(response => {\n        if (this.language == 'it') {\n          this.available_configs_it = response.data.configs;\n        } else {\n          this.available_configs_en = response.data.configs;\n        }\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    updateText() {\n      axios.post(\"http://localhost:8000/api/update-text/\", {\n        text_toEdit: this.editText,\n        file_toEdit: this.txt_file,\n        file_source: this.file_uploaded,\n        language: this.language\n      }).then(response => {\n        this.text = this.editText;\n        this.txt_file = response.data.txt_file_edited;\n        this.editing = false;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    loadCnf() {\n      axios.post(\"http://localhost:8000/api/load-config/\", {\n        file_txt_path: this.txt_file,\n        language: this.language,\n        text: this.text,\n        f_up: this.file_uploaded\n      }).then(response => {\n        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n        this.file_config = response.data.jsonNER;\n        this.loaded = true;\n        this.model_entity = JSON.parse(response.data.entity_model_current);\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    filter() {\n      axios.post(\"http://localhost:8000/api/filter/\", {\n        file_txt_path: this.txt_file,\n        language: this.language,\n        text: this.text,\n        selectedEn: this.selectedEntities\n      }).then(response => {\n        this.high_text = response.data.high;\n        this.colors = response.data.colors;\n        this.high_entities = response.data.ent;\n        this.question = null;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    question_answering() {\n      if (this.language == \"it\" & this.model_choosen == null) {\n        this.model_choosen = 'anakin87/electra-italian-xxl-cased-squad-it';\n      } else {\n        if (this.model_choosen == null) this.model_choosen = 'deepset/roberta-base-squad2';\n      }\n      axios.post(\"http://localhost:8000/api/qa/\", {\n        question: this.question,\n        model: this.model_choosen,\n        text: this.text\n      }).then(response => {\n        this.high_text = response.data.high_qa;\n        this.high_entities = [];\n        this.colors = [];\n        this.answer = response.data.answer;\n        this.selectedEntities = [];\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    saveQuestion() {\n      axios.post(\"http://localhost:8000/api/save-question\", {\n        name_entity: this.name_entity,\n        model: this.model_choosen,\n        question: this.question,\n        answer: this.answer,\n        txt_path: this.txt_file,\n        language: this.language,\n        config_to_change: this.config_to_change,\n        new_c: this.new_config,\n        name_config_new: this.name_new_config,\n        file_c: this.file_config\n      }).then(response => {\n        this.code = response.data.cod;\n        if (this.code == -1) {\n          alert(response.data.res);\n        } else {\n          this.show_modal = false;\n          this.config_to_change = null;\n          this.new_config = false;\n          this.name_entity = null;\n          this.question = null;\n          this.name_new_config = null;\n          this.model_choosen = null;\n        }\n        axios.post(\"http://localhost:8000/api/load-config/\", {\n          file_txt_path: this.txt_file,\n          language: this.language,\n          text: this.text,\n          f_up: this.file_uploaded\n        }).then(response => {\n          this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n          this.file_config = response.data.jsonNER;\n          this.loaded = true;\n          this.model_entity = JSON.parse(response.data.entity_model_current);\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n        axios.post(\"http://localhost:8000/api/get-config/\", {\n          'language': this.language\n        }).then(response => {\n          if (this.language == 'it') {\n            this.available_configs_it = response.data.configs;\n          } else {\n            this.available_configs_en = response.data.configs;\n          }\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    changeConfig() {\n      axios.post(\"http://localhost:8000/api/change-cnf\", {\n        config_name: this.config_to_change,\n        txt: this.txt_file,\n        language: this.language,\n        context: this.text\n      }).then(response => {\n        this.code = response.data.cod;\n        if (this.code == -1) {\n          alert(response.data.res);\n        } else {\n          this.config_to_change = null;\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            this.file_config = response.data.jsonNER;\n            this.loaded = true;\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n          }).catch(error => {\n            console.log(error);\n            alert(error);\n          });\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            'language': this.language\n          }).then(response => {\n            if (this.language == 'it') {\n              this.available_configs_it = response.data.configs;\n            } else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            console.log(error);\n            alert(error);\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    deleteEn() {\n      axios.post(\"http://localhost:8000/api/delete-entities/\", {\n        'file_config': this.file_config,\n        'entities': this.todelete_entities\n      }).then(response => {\n        this.code = response.data.cod;\n        if (code == -1) {\n          alert(response.data.res);\n        } else {\n          this.todelete_entities = [];\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            this.file_config = response.data.jsonNER;\n            this.loaded = true;\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n          }).catch(error => {\n            console.log(error);\n            alert(error);\n          });\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            'language': this.language\n          }).then(response => {\n            if (this.language == 'it') {\n              this.available_configs_it = response.data.configs;\n            } else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            console.log(error);\n            alert(error);\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","text","txt_file","editing","editText","file_uploaded","language","dictionaryObj","selectedEntities","todelete_entities","high_text","loaded","colors","high_entities","available_configs_en","available_configs_it","config_to_change","question","model_choosen","model_available_en","model_available_it","answer","show_modal","file_config","model_entity","name_entity","new_config","name_new_config","code","show_confirm_delete","methods","uploadFile","formData","FormData","append","$refs","file","files","type","post","then","response","pdf_text_it","txt_file_pdf_it","pdf_text_en","txt_file_pdf_en","title","catch","error","console","log","alert","docx_text_it","txt_file_docx_it","docx_text_en","txt_file_docx_en","xlsx_text_it","txt_file_xlsx_it","xlsx_text_en","txt_file_xlsx_en","configs","updateText","text_toEdit","file_toEdit","file_source","txt_file_edited","loadCnf","file_txt_path","f_up","JSON","parse","jsonner_str","jsonNER","entity_model_current","filter","selectedEn","high","ent","question_answering","model","high_qa","saveQuestion","txt_path","new_c","name_config_new","file_c","cod","res","changeConfig","config_name","txt","context","deleteEn"],"sources":["src/components/UploadEdit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        \r\n        <form @submit.prevent=\"uploadFile\"> \r\n            <input type=\"file\" ref=\"file\" accept=\".pdf,.docx, .xlsx\" />\r\n            <div>\r\n                    <label for=\"language-select\">Select language:</label>\r\n                    <select id=\"language-select\" v-model=\"language\">\r\n                        <option value=\"en\">English</option>\r\n                        <option value=\"it\">Italian</option>\r\n                    </select>\r\n                </div>\r\n            <button type=\"submit\" @click=\"dictionaryObj=null; selectedEntities = []; loaded=false; question = null; high_text=null; colors = []\">Upload</button>\r\n        </form>\r\n        \r\n        <div v-if=\"text\">\r\n            <h2>Extracted text</h2>\r\n            <div>\r\n                <textarea v-if=\"!editing & !high_text\" v-model=\"text\" style=\"width: 50%; height: 300px;\" readonly></textarea>\r\n                <textarea v-else-if=\"editing & !high_text\" v-model=\"editText\" style=\"width: 50%; height: 300px;\"></textarea>\r\n                \r\n                <div v-if=\"high_text\" v-html=\"high_text\" contenteditable=\"false\" style=\"width: 50%; height: 300px; overflow: auto;\"></div>\r\n                \r\n                <button v-if=\"high_text\" @click=\"colors = []; selectedEntities=[]; high_text=null; question=null; show_modal = false\">Reset</button>\r\n\r\n                <div v-if=\"colors.length > 0\">\r\n                    <div v-for=\"(color, index) in colors \" :key=\"index\" class=\"color-box\" :style=\"{ backgroundColor: color }\">\r\n                        {{ high_entities[index] }}\r\n                    </div>\r\n                </div> \r\n\r\n            </div>\r\n            \r\n            <div>\r\n                <button v-if=\"!editing & !high_text & loaded == false\" @click=\"editText = text; editing = true\">Edit</button>\r\n                <button v-if=\"editing\" @click=\"updateText\">Save</button>\r\n                <button v-if=\"editing\" @click=\"editing = false\">Cancel</button>   \r\n            </div>\r\n            \r\n            <div v-if=\"loaded==true\">\r\n\r\n                <div>\r\n                    <h4>Configurazione attuale:</h4> {{ file_config }}\r\n                </div>\r\n                \r\n                <br>\r\n\r\n                <form @submit.prevent=\"changeConfig\"> \r\n                        \r\n                    <div v-if=\"language=='it'\">\r\n                        <label for=\"cnf-it-select\">Available configuration:</label>\r\n                            <select id=\"cnf-it-select\" v-model=\"config_to_change\">\r\n                                <option v-for=\"conf in available_configs_it\" :key=\"conf\">{{ conf }} </option>                                     \r\n                            </select>\r\n                    </div>     \r\n                        \r\n                    <div v-else>\r\n                        <label for=\"cnf-en-select\">Available configuration:</label>\r\n                            <select id=\"cnf-en-select\" v-model=\"config_to_change\">\r\n                                <option v-for=\"conf in available_configs_en\" :key=\"conf\">{{ conf }} </option>                                     \r\n                            </select>\r\n                    </div>\r\n\r\n                    \r\n                    <button type=\"submit\" @click=\"dictionaryObj = null; selectedEntities = []; high_text=null; colors =[]\">Change CNF</button>\r\n                </form>\r\n                    \r\n                <div v-if=\"dictionaryObj\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Entity</th>\r\n                                <th>Question</th>\r\n                                <th>Select</th>\r\n                                <th>Model</th>\r\n                                <th>Delete</th>\r\n\r\n                                \r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"(value, key) in dictionaryObj\" :key=\"key\">\r\n                                <td>{{ key }}</td>\r\n                                <td>{{ value }}</td>\r\n                                <td>\r\n                                    <input type=\"checkbox\" v-model=\"selectedEntities\" :value=\"key\">\r\n                                </td>\r\n                                <td>\r\n                                    {{ model_entity[key] }}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <input v-if type=\"checkbox\" v-model=\" todelete_entities \" :value=\" key \">\r\n                                </td>\r\n                                \r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div v-if=\"selectedEntities.length > 0\">\r\n                        <h3>Selected Entities:</h3>\r\n                        \r\n                        <ul>\r\n                            <li v-for=\"entity in selectedEntities\" :key=\"entity\">{{ entity }}</li>\r\n                        </ul>                            \r\n                            \r\n                        <button @click=\"filter\">Filter Selected</button>\r\n                        <button @click=\"selectedEntities=[], high_entities=[], colors = [], high_text=null\">Reset</button>\r\n                    </div>\r\n                    \r\n                    <div v-if=\" todelete_entities.length > 0 \">\r\n                            <h3>Delete entities:</h3>\r\n                        \r\n                            <ul>\r\n                                <li v-for=\" entity  in todelete_entities \" :key=\" entity \">{{ entity }}</li>\r\n                            </ul>                            \r\n                            \r\n                            <button @click=\"show_confirm_delete = true\">Delete Selected</button>\r\n\r\n                            <div v-if=\"show_confirm_delete\">\r\n\r\n                                <label>Are you sure?</label>\r\n                                <button @click.prevent=\" deleteEn \">Yes</button>\r\n                                <button @click.prevent=\" show_confirm_delete = false; todelete_entities=[] \">Cancel</button>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n            <button v-else @click=\"loadCnf\">Load CNF (last used o default)</button>\r\n\r\n            <div>\r\n                <textarea v-model=\"question\" cols=\"30\" rows=\"5\" placeholder=\"Insert your question here\"></textarea>\r\n                        \r\n                <div v-if=\"language == 'it'\" >\r\n                    <label for=\"model-en-select\">Available Model:</label>\r\n                        <select id=\"model-en-select\" v-model=\"model_choosen\">\r\n                            <option v-for=\"model in model_available_it\" :key=\"model\">{{ model }} </option>                                     \r\n                        </select>\r\n                </div>\r\n\r\n                <div v-else>\r\n                    <label for=\"model-it-select\">Available Model:</label>\r\n                        <select id=\"model-it-select\" v-model=\"model_choosen\">\r\n                            <option v-for=\"model in model_available_en\" :key=\"model\"> {{ model }} </option>                                     \r\n                        </select>\r\n                </div>\r\n\r\n                <button  @click=\"question_answering\">GO</button>\r\n\r\n               \r\n\r\n                <button v-if=\"question && high_text\" @click=\"show_modal=true\">Save Question</button>\r\n                \r\n            </div> \r\n\r\n            <div v-if=\"show_modal==true\" class=\"modal\">\r\n                        <div class=\"modal-content\">\r\n                            <h3>Enter Question Details</h3>\r\n                            <form>\r\n                                <label for=\"entity-name\">Entity Name:</label>\r\n                                <input type=\"text\" id=\"entity-name\" v-model=\"name_entity\">\r\n                                <br>\r\n                                <label for=\"check-config\">Scegli a quale configurazione aggiungere la domanda:</label>\r\n                                    <div v-if=\"language == 'it'\">\r\n                                \r\n                                        <select id=\"cnf-it-select\" v-model=\"config_to_change\">\r\n                                            <option v-for=\"conf in available_configs_it\" :key=\"conf\">{{ conf }} </option>                                     \r\n                                        </select>\r\n                                    </div>     \r\n                                \r\n                                    <div v-else>\r\n                                            <select id=\"cnf-en-select\" v-model=\"config_to_change\">\r\n                                                <option v-for=\"conf in available_configs_en\" :key=\"conf\">{{ conf }} </option>                                     \r\n                                            </select>\r\n                                    </div>\r\n                                    <br>\r\n                                    <label for=\"new\">New config?</label>\r\n                                    <input type=\"checkbox\" id=\"new\" v-model=\"new_config\" :value=\"true\">\r\n                                    <div v-if=\"new_config == true\">\r\n                                        <label for=\"config-name\">Config Name:</label>\r\n                                        <input type=\"text\" id=\"config-name\" v-model=\"name_new_config\">\r\n                                    </div>\r\n                                <button @click.prevent=\"saveQuestion\">Save</button>\r\n                                <button @click.prevent=\"show_modal = false\">Cancel</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"; /* a Javascript library used to make HTTP requests from node. js;  It can be used intercept HTTP requests and responses  */\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            text: null,\r\n            txt_file: null,\r\n            editing: false,\r\n            editText: null,\r\n            file_uploaded: null,\r\n            language: \"it\",\r\n            dictionaryObj: null,\r\n            selectedEntities : [],\r\n            todelete_entities : [],\r\n            high_text: null,\r\n            loaded : false,\r\n            colors : [],\r\n            high_entities : [],\r\n            available_configs_en: [],\r\n            available_configs_it: [],\r\n            \r\n            config_to_change: null,\r\n            question: null,\r\n            model_choosen: null,\r\n            model_available_en : ['deepset/roberta-base-squad2', 'distilbert-base-cased-distilled-squad', \r\n                                    'bert-large-uncased-whole-word-masking-finetuned-squad',\r\n                                'squirro/albert-base-v2-squad_v2', 'ahotrod/electra_large_discriminator_squad2_512'],\r\n\r\n            model_available_it: ['anakin87/electra-italian-xxl-cased-squad-it'],\r\n            \r\n            answer : null,\r\n            show_modal : false,\r\n            file_config: null,\r\n            model_entity: null,\r\n            name_entity : null,\r\n            new_config : false,\r\n            name_new_config : null,\r\n            code: 0,\r\n\r\n            show_confirm_delete : false,\r\n            \r\n        };\r\n    },\r\n    methods: {\r\n        uploadFile() {\r\n            \r\n            let formData = new FormData();\r\n            formData.append(\"file\", this.$refs.file.files[0]);\r\n            formData.append(\"language\", this.language);\r\n\r\n            let file = this.$refs.file.files[0];\r\n\r\n            if (file.type === \"application/pdf\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/pdf-upload/\", formData)\r\n                    .then(response => {\r\n                        \r\n                        if(this.language == 'it'){\r\n                            this.text = response.data.pdf_text_it\r\n                            this.txt_file = response.data.txt_file_pdf_it\r\n                        }else{\r\n                            this.text = response.data.pdf_text_en\r\n                            this.txt_file = response.data.txt_file_pdf_en\r\n                        }\r\n\r\n                        this.file_uploaded = response.data.title\r\n\r\n                        \r\n                        \r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/word-upload/\", formData)\r\n                    .then(response => {\r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.docx_text_it\r\n                            this.txt_file = response.data.txt_file_docx_it\r\n                        } else {\r\n                            this.text = response.data.docx_text_en\r\n                            this.txt_file = response.data.txt_file_docx_en\r\n\r\n                        }\r\n\r\n                        this.file_uploaded = response.data.title\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/xlsx-upload/\", formData)\r\n                    .then(response => {\r\n                        \r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.xlsx_text_it\r\n                            this.txt_file = response.data.txt_file_xlsx_it\r\n                        } else {\r\n                            this.text = response.data.xlsx_text_en\r\n                            this.txt_file = response.data.txt_file_xlsx_en\r\n                        }\r\n                        this.file_uploaded = response.data.title\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else {\r\n                alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\r\n            }\r\n            axios.post(\"http://localhost:8000/api/get-config/\" ,{'language': this.language})\r\n                .then(response => {\r\n                    if(this.language=='it'){\r\n                        this.available_configs_it = response.data.configs;\r\n                    }\r\n                    else {\r\n                        this.available_configs_en = response.data.configs;\r\n                    }\r\n\r\n                    \r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n        updateText() {\r\n            axios.post(\"http://localhost:8000/api/update-text/\", { text_toEdit: this.editText, file_toEdit: this.txt_file, file_source: this.file_uploaded, language: this.language})\r\n                .then(response => {\r\n                    this.text = this.editText;\r\n                    this.txt_file = response.data.txt_file_edited;\r\n                    this.editing = false;                    \r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        loadCnf(){\r\n            axios.post(\"http://localhost:8000/api/load-config/\", {file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded})\r\n            .then(response => {\r\n                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                this.file_config = response.data.jsonNER\r\n                this.loaded = true\r\n                this.model_entity = JSON.parse(response.data.entity_model_current)\r\n            })\r\n            .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n            });            \r\n        },\r\n\r\n        filter(){\r\n            axios.post(\"http://localhost:8000/api/filter/\", {file_txt_path: this.txt_file, language: this.language, text: this.text, selectedEn: this.selectedEntities})\r\n            .then(response =>{\r\n                this.high_text = response.data.high;\r\n                this.colors = response.data.colors;\r\n                this.high_entities = response.data.ent;\r\n                this.question = null;\r\n            })\r\n            .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n            });\r\n        },\r\n        question_answering(){\r\n            \r\n            if(this.language == \"it\" & this.model_choosen==null){\r\n                this.model_choosen = 'anakin87/electra-italian-xxl-cased-squad-it';\r\n            }else{\r\n                if(this.model_choosen==null)\r\n                    this.model_choosen = 'deepset/roberta-base-squad2';\r\n            }\r\n\r\n            axios.post(\"http://localhost:8000/api/qa/\", { question: this.question, model: this.model_choosen, text: this.text})\r\n                .then(response => {\r\n                    this.high_text = response.data.high_qa;\r\n                    this.high_entities = []\r\n                    this.colors = []\r\n                    this.answer = response.data.answer\r\n                    this.selectedEntities=[]\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        saveQuestion(){\r\n\r\n            axios.post(\"http://localhost:8000/api/save-question\", { name_entity: this.name_entity, model: this.model_choosen, question: this.question, answer: this.answer, txt_path: this.txt_file, language: this.language, config_to_change: this.config_to_change, new_c: this.new_config, name_config_new: this.name_new_config, file_c: this.file_config })\r\n                .then(response => {\r\n\r\n                    this.code = response.data.cod\r\n\r\n                    if (this.code == -1) {\r\n                        alert(response.data.res)\r\n                    }\r\n                    else {\r\n                        this.show_modal = false;\r\n                        this.config_to_change = null;\r\n                        this.new_config = false;\r\n                        this.name_entity = null;\r\n                        this.question = null;\r\n                        this.name_new_config = null;\r\n                        this.model_choosen = null;\r\n\r\n                    }\r\n\r\n                    axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                        .then(response => {\r\n                            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                            this.file_config = response.data.jsonNER\r\n                            this.loaded = true\r\n                            this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                            alert(error);\r\n                        });\r\n\r\n                    axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                        .then(response => {\r\n                            if (this.language == 'it') {\r\n                                this.available_configs_it = response.data.configs;\r\n                            }\r\n                            else {\r\n                                this.available_configs_en = response.data.configs;\r\n                            }\r\n\r\n\r\n                        }).catch(error => {\r\n                            console.log(error);\r\n                            alert(error);\r\n                        });\r\n\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });          \r\n        },\r\n\r\n        changeConfig(){\r\n            axios.post(\"http://localhost:8000/api/change-cnf\", {config_name: this.config_to_change, txt: this.txt_file, language: this.language, context: this.text })\r\n            .then(response =>{\r\n                this.code = response.data.cod\r\n\r\n                    if (this.code == -1) {\r\n                        alert(response.data.res)\r\n                    }\r\n                    else {\r\n                        this.config_to_change = null;\r\n                        axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                            .then(response => {\r\n                                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                                this.file_config = response.data.jsonNER\r\n                                this.loaded = true\r\n                                this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n\r\n                        axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                            .then(response => {\r\n                                if (this.language == 'it') {\r\n                                    this.available_configs_it = response.data.configs;\r\n                                }\r\n                                else {\r\n                                    this.available_configs_en = response.data.configs;\r\n                                }\r\n\r\n\r\n                            }).catch(error => {\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n            });\r\n        },\r\n\r\n        deleteEn(){\r\n            axios.post(\"http://localhost:8000/api/delete-entities/\", { 'file_config': this.file_config, 'entities': this.todelete_entities })\r\n                .then(response => {\r\n                    this.code = response.data.cod\r\n\r\n                    if(code == -1){\r\n                        alert(response.data.res)\r\n                    }else{\r\n                        this.todelete_entities = []\r\n                        axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                            .then(response => {\r\n                                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                                this.file_config = response.data.jsonNER\r\n                                this.loaded = true\r\n                                this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n\r\n                        axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                            .then(response => {\r\n                                if (this.language == 'it') {\r\n                                    this.available_configs_it = response.data.configs;\r\n                                }\r\n                                else {\r\n                                    this.available_configs_en = response.data.configs;\r\n                                }\r\n\r\n\r\n                            }).catch(error => {\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });                        \r\n                    }\r\n\r\n\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        }\r\n\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.color-box {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin: 5px;\r\n    display: inline-block;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}