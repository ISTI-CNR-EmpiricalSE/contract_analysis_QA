{"ast":null,"code":"// This module imports the Axios library, which is a JavaScript library used to make HTTP requests from node.js\nimport axios from \"axios\";\n\n// Export a default object containing a data function\nexport default {\n  data() {\n    // Initialize properties in the returned object\n    return {\n      // A string that will hold the text entered by the user, initially set to null\n      text: null,\n      // A file object that will hold the uploaded text file, initially set to null\n      txt_file: null,\n      // A boolean value that indicates whether the user is currently editing text, initially set to false\n      editing: false,\n      // A string that will hold the edited text, initially set to null\n      editText: null,\n      // A file object that will hold the uploaded configuration file, initially set to null\n      file_uploaded: null,\n      // A string that indicates the language of the text, initially set to \"it\" (Italian)\n      language: \"it\",\n      // An object that will hold the dictionary of entities found in the text, initially set to null\n      dictionaryObj: null,\n      // An array that will hold the currently selected entities, initially set to an empty array\n      selectedEntities: [],\n      // An array that will hold the entities to be deleted, initially set to an empty array\n      todelete_entities: [],\n      // A string that will hold the text with the selected entities highlighted, initially set to null\n      high_text: null,\n      // A boolean value that indicates whether the data has finished loading, initially set to false\n      loaded: false,\n      // An array that will hold the colors for the highlighted entities, initially set to an empty array\n      colors: [],\n      // An array that will hold the entities that have been highlighted, initially set to an empty array\n      high_entities: [],\n      // An array that will hold the available configurations for English language, initially set to an empty array\n      available_configs_en: [],\n      // An array that will hold the available configurations for Italian language, initially set to an empty array\n      available_configs_it: [],\n      // A string that indicates the configuration to be changed, initially set to null\n      config_to_change: null,\n      // A string that holds the question to be answered, initially set to null\n      question: null,\n      // A string that indicates the chosen language model, initially set to null\n      model_choosen: null,\n      // An array that holds the available English language models, initially set to an array of model names\n      model_available_en: ['deepset/roberta-base-squad2', 'distilbert-base-cased-distilled-squad', 'bert-large-uncased-whole-word-masking-finetuned-squad', 'squirro/albert-base-v2-squad_v2', 'ahotrod/electra_large_discriminator_squad2_512'],\n      // An array that holds the available Italian language models, initially set to an array of model names\n      model_available_it: ['anakin87/electra-italian-xxl-cased-squad-it'],\n      // A string that holds the answer to the question, initially set to null\n      answer: null,\n      // A boolean value that indicates whether to show the modal for file upload, initially set to false\n      show_modal: false,\n      // A file object that holds the uploaded configuration file, initially set to null\n      file_config: null,\n      // A string that indicates the model entity, initially set to null\n      model_entity: null,\n      // A string that indicates the name of the entity, initially set to null\n      name_entity: null,\n      // A boolean that indicates if is necessary create a new configuration, initially set to false\n      new_config: false,\n      // A string tha indicates tha name of the configuration to create, initially set to null\n      name_new_config: null,\n      // An integer that indicate the result of the response\n      code: 0,\n      // A boolean that indicates the deletion of the selected entities, initially set to false\n      show_confirm_delete: false\n    };\n  },\n  methods: {\n    // this function upload a file \n    uploadFile() {\n      // Create a new FormData object.\n      let formData = new FormData();\n      // Add the file object and the language property to the form data object.\n      formData.append(\"file\", this.$refs.file.files[0]);\n      formData.append(\"language\", this.language);\n\n      // Get the file object from the input element.\n      let file = this.$refs.file.files[0];\n\n      // Check the file type to determine which API endpoint to call.\n      if (file.type === \"application/pdf\") {\n        // Make a POST request to the PDF upload API endpoint.\n        axios.post(\"http://localhost:8000/api/pdf-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language == 'it') {\n            this.text = response.data.pdf_text_it;\n            this.txt_file = response.data.txt_file_pdf_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.pdf_text_en;\n            this.txt_file = response.data.txt_file_pdf_en;\n          }\n\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\n        // Make a POST request to the Word upload API endpoint.\n        axios.post(\"http://localhost:8000/api/word-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language === 'it') {\n            this.text = response.data.docx_text_it;\n            this.txt_file = response.data.txt_file_docx_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.docx_text_en;\n            this.txt_file = response.data.txt_file_docx_en;\n          }\n\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        // Make a POST request to the XLSX upload API endpoint.\n        axios.post(\"http://localhost:8000/api/xlsx-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language === 'it') {\n            this.text = response.data.xlsx_text_it;\n            this.txt_file = response.data.txt_file_xlsx_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.xlsx_text_en;\n            this.txt_file = response.data.txt_file_xlsx_en;\n          }\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else {\n        // If the file type is not supported, display an error message.\n        alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\n      }\n      // Make a POST request to the get-config API endpoint to retrieve the available configurations and sets the relative list based on the language\n\n      axios.post(\"http://localhost:8000/api/get-config/\", {\n        'language': this.language\n      }).then(response => {\n        if (this.language == 'it') {\n          this.available_configs_it = response.data.configs;\n        } else {\n          this.available_configs_en = response.data.configs;\n        }\n\n        // If there was an error, log it to the console and show an alert with the error message\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // this function modify the text\n    updateText() {\n      // Make a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/update-text/\", {\n        // The text to be edited\n        text_toEdit: this.editText,\n        // The name of the file to be edited\n        file_toEdit: this.txt_file,\n        // The source file from which the original text was obtained\n        file_source: this.file_uploaded,\n        // The language of the text\n        language: this.language\n      })\n      // If the request was successful, update the text and file variables and disable editing mode\n      .then(response => {\n        this.text = this.editText;\n        this.txt_file = response.data.txt_file_edited;\n        this.editing = false;\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function loads a configuration file for the NER model\n    loadCnf() {\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/load-config/\", {\n        // The path to the text file to be analyzed\n        file_txt_path: this.txt_file,\n        // The language of the text\n        language: this.language,\n        // The text to be analyzed\n        text: this.text,\n        // The source file from which the original text was obtained\n        f_up: this.file_uploaded\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n        this.file_config = response.data.jsonNER;\n        this.loaded = true;\n        this.model_entity = JSON.parse(response.data.entity_model_current);\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function filters the NER output by a selected set of entities\n    filter() {\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/filter/\", {\n        // The path to the text file to be analyzed\n        file_txt_path: this.txt_file,\n        // The language of the text\n        language: this.language,\n        // The text to be analyzed\n        text: this.text,\n        // The set of entities to filter by\n        selectedEn: this.selectedEntities\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.high_text = response.data.high;\n        this.colors = response.data.colors;\n        this.high_entities = response.data.ent;\n        this.question = null;\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function performs question-answering on the given text\n    question_answering() {\n      // If the language is Italian and no model has been chosen, default to 'anakin87/electra-italian-xxl-cased-squad-it'\n      if (this.language == \"it\" & this.model_choosen == null) {\n        this.model_choosen = 'anakin87/electra-italian-xxl-cased-squad-it';\n      } else {\n        // Otherwise, if no model has been chosen, default to 'deepset/roberta-base-squad2'\n        if (this.model_choosen == null) this.model_choosen = 'deepset/roberta-base-squad2';\n      }\n\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/qa/\", {\n        // The question to be answered\n        question: this.question,\n        // The name of the question-answering model to use\n        model: this.model_choosen,\n        // The text to be analyzed\n        text: this.text\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.high_text = response.data.high_qa;\n        this.high_entities = [];\n        this.colors = [];\n        this.answer = response.data.answer;\n        this.selectedEntities = [];\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // this function save a question \n    saveQuestion() {\n      // Send a POST request to the API endpoint to save the question and answer\n      axios.post(\"http://localhost:8000/api/save-question/\", {\n        name_entity: this.name_entity,\n        // Name of the entity\n        model: this.model_choosen,\n        // Model used for the question answering\n        question: this.question,\n        // The question that was asked\n        answer: this.answer,\n        // The answer to the question\n        txt_path: this.txt_file,\n        // Path to the text file being analyzed\n        language: this.language,\n        // Language of the text file\n        config_to_change: this.config_to_change,\n        // Name of the configuration being modified\n        new_c: this.new_config,\n        // Boolean indicating if a new configuration is being created\n        name_config_new: this.name_new_config,\n        // Name of the new configuration being created\n        file_c: this.file_config // The configuration file being used\n      }).then(response => {\n        // If the response indicates an error, display an alert\n        if (response.data.cod == -1) {\n          alert(response.data.res);\n        }\n        // Otherwise, update the state variables and retrieve the updated configuration and available configurations\n        else {\n          this.show_modal = false; // Hide the modal used to save the question\n          this.config_to_change = null; // Clear the name of the configuration being modified\n          this.new_config = false; // Reset the flag indicating if a new configuration is being created\n          this.name_entity = null; // Clear the name of the entity\n          this.question = null; // Clear the current question\n          this.name_new_config = null; // Clear the name of the new configuration being created\n          this.model_choosen = null; // Clear the name of the model used for question answering\n        }\n\n        // Retrieve the updated configuration\n        axios.post(\"http://localhost:8000/api/load-config/\", {\n          file_txt_path: this.txt_file,\n          // Path to the text file being analyzed\n          language: this.language,\n          // Language of the text file\n          text: this.text,\n          // The text being analyzed\n          f_up: this.file_uploaded // The uploaded file, if any\n        }).then(response => {\n          this.dictionaryObj = JSON.parse(response.data.jsonner_str); // Parse the configuration as a JSON object\n          this.file_config = response.data.jsonNER; // Store the configuration file\n          this.loaded = true; // Set the loaded flag to true\n          this.model_entity = JSON.parse(response.data.entity_model_current); // Parse the model entity as a JSON object\n        }).catch(error => {\n          console.log(error); // Log any errors to the console\n          alert(error); // Display an alert with the error message\n        });\n\n        // Retrieve the available configurations\n        axios.post(\"http://localhost:8000/api/get-config/\", {\n          'language': this.language\n        }).then(response => {\n          if (this.language == 'it') {\n            this.available_configs_it = response.data.configs; // Store the Italian configurations\n          } else {\n            this.available_configs_en = response.data.configs; // Store the English configurations\n          }\n        }).catch(error => {\n          console.log(error); // Log any errors to the console\n          alert(error); // Display an alert with the error message\n        });\n      }).catch(error => {\n        console.log(error); // Log any errors to the console\n        alert(error); // Display an alert with the error message\n      });\n    },\n\n    // This function changes the configuration settings and loads the updated configuration file.\n    changeConfig() {\n      // Send a POST request to the API endpoint to change the configuration settings.\n      axios.post(\"http://localhost:8000/api/change-cnf/\", {\n        config_name: this.config_to_change,\n        txt: this.txt_file,\n        language: this.language,\n        context: this.text\n      }).then(response => {\n        // If the response from the API contains an error code, display an alert with the error message.\n        this.code = response.data.cod;\n        if (this.code == -1) {\n          alert(response.data.res);\n        }\n        // If there is no error, load the updated configuration file and update the available configuration options.\n        else {\n          // Clear the current configuration selection.\n          this.config_to_change = null;\n          // Send a POST request to the API endpoint to load the updated configuration file.\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            // Parse the loaded JSON data into an object and set it to a variable.\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            // Set the loaded configuration file to a variable.\n            this.file_config = response.data.jsonNER;\n            // Set the loaded flag to true to indicate that the configuration has been loaded.\n            this.loaded = true;\n            // Parse the current entity model into an object and set it to a variable.\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n          }).catch(error => {\n            // Display an alert with the error message if the configuration file fails to load.\n            console.log(error);\n            alert(error);\n          });\n          // Send a POST request to the API endpoint to get the available configuration options.\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            'language': this.language\n          }).then(response => {\n            // If the language is Italian, update the available Italian configuration options.\n            if (this.language == 'it') {\n              this.available_configs_it = response.data.configs;\n            }\n            // If the language is English, update the available English configuration options.\n            else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            // Display an alert with the error message if the configuration options fail to load.\n            console.log(error);\n            alert(error);\n          });\n        }\n      }).catch(error => {\n        // Display an alert with the error message if there is an error with the POST request.\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function deletes entities from the configuration file.\n    deleteEn() {\n      // Send a POST request to the API endpoint to delete the specified entities.\n      axios.post(\"http://localhost:8000/api/delete-entities/\", {\n        'file_config': this.file_config,\n        'entities': this.todelete_entities\n      }).then(response => {\n        // If the response from the API contains an error code, display an alert with the error message.\n        if (response.data.cod == -1) {\n          alert(response.data.res);\n        }\n        // If there is no error, reload the configuration file and update the available configuration options.\n        else {\n          // Clear the current list of entities to delete.\n          this.todelete_entities = [];\n          // Send a POST request to the API endpoint to load the updated configuration file.\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            // Parse the loaded JSON data into an object and set it to a variable.\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            // Set the loaded configuration file to a variable.\n            this.file_config = response.data.jsonNER;\n            // Set the loaded flag to true to indicate that the configuration has been loaded.\n            this.loaded = true;\n            // Parse the current entity model into an object and set it to a variable.\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n          }).catch(error => {\n            // Display an alert with the error message if the configuration file fails to load.\n            console.log(error);\n            alert(error);\n          });\n          // Send a POST request to the API endpoint to get the available configuration options.\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            'language': this.language\n          }).then(response => {\n            // If the language is Italian, update the available Italian configuration options.\n            if (this.language == 'it') {\n              this.available_configs_it = response.data.configs;\n            }\n            // If the language is English, update the available English configuration options.\n            else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            // Display an alert with the error message if the configuration options fail to load.\n            console.log(error);\n            alert(error);\n          });\n        }\n      }).catch(error => {\n        // Display an alert with the error message if there is an error with the POST request.\n        console.log(error);\n        alert(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","text","txt_file","editing","editText","file_uploaded","language","dictionaryObj","selectedEntities","todelete_entities","high_text","loaded","colors","high_entities","available_configs_en","available_configs_it","config_to_change","question","model_choosen","model_available_en","model_available_it","answer","show_modal","file_config","model_entity","name_entity","new_config","name_new_config","code","show_confirm_delete","methods","uploadFile","formData","FormData","append","$refs","file","files","type","post","then","response","pdf_text_it","txt_file_pdf_it","pdf_text_en","txt_file_pdf_en","title","catch","error","console","log","alert","docx_text_it","txt_file_docx_it","docx_text_en","txt_file_docx_en","xlsx_text_it","txt_file_xlsx_it","xlsx_text_en","txt_file_xlsx_en","configs","updateText","text_toEdit","file_toEdit","file_source","txt_file_edited","loadCnf","file_txt_path","f_up","JSON","parse","jsonner_str","jsonNER","entity_model_current","filter","selectedEn","high","ent","question_answering","model","high_qa","saveQuestion","txt_path","new_c","name_config_new","file_c","cod","res","changeConfig","config_name","txt","context","deleteEn"],"sources":["src/components/UploadEdit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n            <!-- This form will handle the file upload -->\r\n            <form @submit.prevent=\"uploadFile\"> \r\n                <!-- This input element will allow the user to select a file -->\r\n                <input type=\"file\" ref=\"file\" accept=\".pdf,.docx, .xlsx\" />\r\n                <!-- This div contains a select element for choosing the language -->\r\n                <div>\r\n                    <label for=\"language-select\">Select language:</label>\r\n                    <!-- This select element will bind the selected value to the \"language\" property in the component's data object -->\r\n                    <select id=\"language-select\" v-model=\"language\">\r\n                    <option value=\"en\">English</option>\r\n                    <option value=\"it\">Italian</option>\r\n                    </select>\r\n                </div>\r\n                <!-- This button will trigger the file upload when clicked -->\r\n                <button type=\"submit\" @click=\"dictionaryObj = null; selectedEntities = []; loaded = false; question = null; high_text = null; colors = []; text = null\">Upload new file</button>\r\n            </form>\r\n        </div>\r\n\r\n        <div v-if=\"text\"> <!-- Renders the selected entities only if there are any -->\r\n            <div>\r\n                <!-- This section of the template displays the extracted text from the uploaded file -->\r\n                <h2>Extracted text</h2>\r\n            </div>\r\n\r\n            <div>\r\n                <!-- If editing is not enabled and no high text is present, display a readonly textarea with the extracted text -->\r\n                <textarea v-if=\" !editing & !high_text \" v-model=\" text \" style=\"width: 50%; height: 300px;\" readonly></textarea>\r\n                \r\n                <!-- If editing is enabled and no high text is present, display an editable textarea with the extracted text -->\r\n                <textarea v-else-if=\" editing & !high_text \" v-model=\" editText \" style=\"width: 50%; height: 300px;\"></textarea>\r\n                \r\n                <!-- If high text is present, display a div containing the highlighted text with entity colors -->\r\n                <div v-if=\" high_text \" v-html=\" high_text \" contenteditable=\"false\" style=\"width: 50%; height: 300px; overflow: auto;\"></div>\r\n                \r\n                <!-- If entity colors are present, display a series of color boxes representing each entity with its associated text -->\r\n                <div v-if=\" colors.length > 0 \">\r\n                    <div v-for=\"( color, index ) in  colors  \" :key=\" index \" class=\"color-box\" :style=\" { backgroundColor: color } \">\r\n                    {{ high_entities[index] }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- This section of the template contains buttons for editing the extracted text -->\r\n            <div>\r\n                <!-- If editing is not enabled and no high text is present and the file is not yet loaded, display an \"Edit\" button -->\r\n                <button v-if=\" !editing &\" @click=\" editText = text; editing = true \">Edit</button>\r\n                <!-- If editing is enabled, display \"Save\" and \"Cancel\" buttons -->\r\n                <button v-if=\" editing \" @click=\" updateText \">Save</button>\r\n                <button v-if=\" editing \" @click=\" editing = false \">Cancel</button>\r\n            </div>\r\n\r\n            \r\n            <div v-if=\"loaded==true\"> <!-- Only if is been loaded a configuration -->\r\n\r\n                <!-- This div displays the current configuration -->\r\n                <div>\r\n                <h4>Configurazione attuale:</h4> {{ file_config }}\r\n                </div>\r\n                            \r\n                <br>\r\n\r\n                <div>\r\n                    <!-- This form allows the user to change the configuration -->\r\n                    <form @submit.prevent=\" changeConfig \"> \r\n                        <!-- If the selected language is Italian, display a select element for Italian configurations -->\r\n                        <div v-if=\" language == 'it' \">\r\n                            <label for=\"cnf-it-select\">Available configuration:</label>\r\n                            <select id=\"cnf-it-select\" v-model=\" config_to_change \">\r\n                            <option v-for=\" conf  in  available_configs_it \" :key=\" conf \">{{ conf }} </option>                                     \r\n                            </select>\r\n                        </div>     \r\n                                            \r\n                        <!-- If the selected language is not Italian, display a select element for English configurations -->\r\n                        <div v-else>\r\n                            <label for=\"cnf-en-select\">Available configuration:</label>\r\n                            <select id=\"cnf-en-select\" v-model=\" config_to_change \">\r\n                            <option v-for=\" conf  in  available_configs_en \" :key=\" conf \">{{ conf }} </option>                                     \r\n                            </select>\r\n                        </div>\r\n\r\n                        <!-- This button will trigger the configuration change when clicked -->\r\n                        <button type=\"submit\" @click=\" dictionaryObj = null; selectedEntities = []; high_text = null; colors = [] \">Change CNF</button>\r\n                    </form>\r\n                </div>\r\n                    \r\n                <div v-if=\" dictionaryObj \"> <!-- Renders the div only if dictionaryObj exists -->\r\n                    <table> <!-- Renders a table with entities and their questions -->\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Entity</th>\r\n                                <th>Question</th>\r\n                                <th>Select</th>\r\n                                <th>Model</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"( value, key ) in  dictionaryObj \" :key=\" key \">\r\n                                <td>{{ key }}</td> <!-- Renders the entity -->\r\n                                <td>{{ value }}</td> <!-- Renders the entity's question -->\r\n                                <td>\r\n                                    <input type=\"checkbox\" v-model=\" selectedEntities \" :value=\" key \">\r\n                                    <!-- Checkbox to select the entity to filter or delete -->\r\n                                </td>\r\n                                <td>\r\n                                    {{ model_entity[key] }} <!-- Renders the entity's model -->\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <input v-if=\" model_entity[key] != 'Spacy' \" type=\"checkbox\" v-model=\" todelete_entities \" :value=\" key \">\r\n                                    <!-- Checkbox to select the entity to delete, only if model is not \"Spacy\" -->\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <div v-if=\" selectedEntities.length > 0 \"> <!-- Renders the selected entities only if there are any -->\r\n                        <h3>Selected Entities:</h3>\r\n                    \r\n                        <ul>\r\n                            <li v-for=\" entity  in  selectedEntities \" :key=\" entity \">{{ entity }}</li>\r\n                            <!-- Renders the selected entities' names in a list -->\r\n                        </ul>                            \r\n                        \r\n                        <button @click=\" filter \">Filter Selected</button> <!-- Button to filter the selected entities -->\r\n                        \r\n                        \r\n                    </div>\r\n                \r\n                    <div v-if=\" todelete_entities.length > 0 \"> <!-- Renders the entities to delete only if there are any -->\r\n                        <h3>Delete entities:</h3>\r\n                    \r\n                        <ul>\r\n                            <li v-for=\" entity  in  todelete_entities \" :key=\" entity \">{{ entity }}</li>\r\n                            <!-- Renders the entities to delete's names in a list -->\r\n                        </ul>                            \r\n                        \r\n                        <button @click=\" show_confirm_delete = true \">Delete Selected</button>\r\n                        <!-- Button to confirm the deletion of the selected entities -->\r\n\r\n                        <div v-if=\" show_confirm_delete \"> <!-- Renders a confirmation dialog only if show_confirm_delete is true -->\r\n                            <label>Are you sure?</label>\r\n                            <button @click.prevent=\" deleteEn \">Yes</button>\r\n                            <button @click.prevent=\" show_confirm_delete = false; todelete_entities = [] \">Cancel</button>\r\n                            <!-- Buttons to confirm or cancel the deletion of the selected entities -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                \r\n            </div>\r\n            \r\n            <button v-else @click=\" loadCnf \">Load CNF (last used o default)</button>\r\n\r\n            <!-- A text area where the user can input their question -->\r\n            <div>\r\n                <textarea v-model=\" question \" cols=\"30\" rows=\"5\" placeholder=\"Insert your question here\"></textarea>\r\n                            \r\n                <!-- A dropdown to select the model to be used, displayed only if the language is Italian -->\r\n                <div v-if=\" language == 'it' \" >\r\n                    <label for=\"model-en-select\">Available Model:</label>\r\n                    <select id=\"model-en-select\" v-model=\" model_choosen \">\r\n                        <option v-for=\" model  in  model_available_it \" :key=\" model \">{{ model }} </option>                                     \r\n                    </select>\r\n                </div>\r\n\r\n                <!-- A dropdown to select the model to be used, displayed only if the language is not Italian -->\r\n                <div v-else>\r\n                    <label for=\"model-it-select\">Available Model:</label>\r\n                    <select id=\"model-it-select\" v-model=\" model_choosen \">\r\n                        <option v-for=\" model  in  model_available_en \" :key=\" model \"> {{ model }} </option>                                     \r\n                    </select>\r\n                </div>\r\n\r\n                <!-- A button to trigger the question answering process -->\r\n                <button @click=\" question_answering \">GO</button>\r\n\r\n                <!-- A button to save the question, displayed only if a question has been entered and an answer has been found -->\r\n                <button v-if=\" question && high_text \" @click=\" show_modal = true \">Save Question</button>\r\n                        \r\n            </div>\r\n\r\n\r\n            <!-- Modal to enter details for saving a question -->\r\n            <div v-if=\" show_modal == true \" class=\"modal\">\r\n                <div class=\"modal-content\">\r\n                    <h3>Enter Question Details</h3>\r\n                    <form>\r\n                        <!-- Input field for entity name -->\r\n                        <label for=\"entity-name\">Entity Name:</label>\r\n                        <input type=\"text\" id=\"entity-name\" v-model=\" name_entity \">\r\n                        <br>\r\n                        <!-- Dropdown menu to select the configuration to add the question to -->\r\n                        <label for=\"check-config\">Select configuration to add question to:</label>\r\n                        <!-- Language-specific options for the dropdown menu -->\r\n                        <div v-if=\" language == 'it' \">\r\n                            <select id=\"cnf-it-select\" v-model=\" config_to_change \">\r\n                                <!-- Option elements for Italian configuration names -->\r\n                                <option v-for=\" conf  in  available_configs_it \" :key=\" conf \">{{ conf }} </option>                                     \r\n                            </select>\r\n                        </div>     \r\n                        <div v-else>\r\n                            <select id=\"cnf-en-select\" v-model=\" config_to_change \">\r\n                                <!-- Option elements for English configuration names -->\r\n                                <option v-for=\" conf  in  available_configs_en \" :key=\" conf \">{{ conf }} </option>                                     \r\n                            </select>\r\n                        </div>\r\n                        <br>\r\n                        <!-- Checkbox to indicate if creating a new configuration -->\r\n                        <label for=\"new\">New config?</label>\r\n                        <input type=\"checkbox\" id=\"new\" v-model=\" new_config \" :value=\" true \">\r\n                        <!-- Input field for new configuration name, only shown if checkbox is selected -->\r\n                        <div v-if=\" new_config == true \">\r\n                            <label for=\"config-name\">Config Name:</label>\r\n                            <input type=\"text\" id=\"config-name\" v-model=\" name_new_config \">\r\n                        </div>\r\n                        <!-- Save and cancel buttons -->\r\n                        <button @click.prevent=\" saveQuestion \">Save</button>\r\n                        <button @click.prevent=\" show_modal = false \">Cancel</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Button to reset the selected entities and their highlighting -->\r\n            <button v-if=\" high_text \" @click=\" selectedEntities = []; high_entities = []; colors = []; high_text = null; colors = []; question = null; show_modal = false; \">Reset</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// This module imports the Axios library, which is a JavaScript library used to make HTTP requests from node.js\r\nimport axios from \"axios\";\r\n\r\n// Export a default object containing a data function\r\nexport default {\r\n    data() {\r\n        // Initialize properties in the returned object\r\n        return {\r\n            // A string that will hold the text entered by the user, initially set to null\r\n            text: null,\r\n            // A file object that will hold the uploaded text file, initially set to null\r\n            txt_file: null,\r\n            // A boolean value that indicates whether the user is currently editing text, initially set to false\r\n            editing: false,\r\n            // A string that will hold the edited text, initially set to null\r\n            editText: null,\r\n            // A file object that will hold the uploaded configuration file, initially set to null\r\n            file_uploaded: null,\r\n            // A string that indicates the language of the text, initially set to \"it\" (Italian)\r\n            language: \"it\",\r\n            // An object that will hold the dictionary of entities found in the text, initially set to null\r\n            dictionaryObj: null,\r\n            // An array that will hold the currently selected entities, initially set to an empty array\r\n            selectedEntities: [],\r\n            // An array that will hold the entities to be deleted, initially set to an empty array\r\n            todelete_entities: [],\r\n            // A string that will hold the text with the selected entities highlighted, initially set to null\r\n            high_text: null,\r\n            // A boolean value that indicates whether the data has finished loading, initially set to false\r\n            loaded: false,\r\n            // An array that will hold the colors for the highlighted entities, initially set to an empty array\r\n            colors: [],\r\n            // An array that will hold the entities that have been highlighted, initially set to an empty array\r\n            high_entities: [],\r\n            // An array that will hold the available configurations for English language, initially set to an empty array\r\n            available_configs_en: [],\r\n            // An array that will hold the available configurations for Italian language, initially set to an empty array\r\n            available_configs_it: [],\r\n            // A string that indicates the configuration to be changed, initially set to null\r\n            config_to_change: null,\r\n            // A string that holds the question to be answered, initially set to null\r\n            question: null,\r\n            // A string that indicates the chosen language model, initially set to null\r\n            model_choosen: null,\r\n            // An array that holds the available English language models, initially set to an array of model names\r\n            model_available_en: ['deepset/roberta-base-squad2', 'distilbert-base-cased-distilled-squad',\r\n                'bert-large-uncased-whole-word-masking-finetuned-squad',\r\n                'squirro/albert-base-v2-squad_v2', 'ahotrod/electra_large_discriminator_squad2_512'],\r\n            // An array that holds the available Italian language models, initially set to an array of model names\r\n            model_available_it: ['anakin87/electra-italian-xxl-cased-squad-it'],\r\n            // A string that holds the answer to the question, initially set to null\r\n            answer: null,\r\n            // A boolean value that indicates whether to show the modal for file upload, initially set to false\r\n            show_modal: false,\r\n            // A file object that holds the uploaded configuration file, initially set to null\r\n            file_config: null,\r\n            // A string that indicates the model entity, initially set to null\r\n            model_entity: null,\r\n            // A string that indicates the name of the entity, initially set to null\r\n            name_entity : null,\r\n            // A boolean that indicates if is necessary create a new configuration, initially set to false\r\n            new_config : false,\r\n            // A string tha indicates tha name of the configuration to create, initially set to null\r\n            name_new_config : null,\r\n            // An integer that indicate the result of the response\r\n            code: 0,\r\n            // A boolean that indicates the deletion of the selected entities, initially set to false\r\n            show_confirm_delete : false,\r\n            \r\n        };\r\n    },\r\n    methods: {\r\n        // this function upload a file \r\n        uploadFile() {\r\n            // Create a new FormData object.\r\n            let formData = new FormData();\r\n            // Add the file object and the language property to the form data object.\r\n            formData.append(\"file\", this.$refs.file.files[0]);\r\n            formData.append(\"language\", this.language);\r\n\r\n            // Get the file object from the input element.\r\n            let file = this.$refs.file.files[0];\r\n\r\n            // Check the file type to determine which API endpoint to call.\r\n            if (file.type === \"application/pdf\") {\r\n                // Make a POST request to the PDF upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/pdf-upload/\", formData)\r\n                    .then(response => {\r\n                        // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                        if (this.language == 'it') {\r\n                            this.text = response.data.pdf_text_it\r\n                            this.txt_file = response.data.txt_file_pdf_it\r\n                        }\r\n                        // Otherwise, set the text and TXT file to the English versions.\r\n                        else {\r\n                            this.text = response.data.pdf_text_en\r\n                            this.txt_file = response.data.txt_file_pdf_en\r\n                        }\r\n\r\n                        // Set the file_uploaded property to the title of the uploaded file.\r\n                        this.file_uploaded = response.data.title\r\n                    })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\r\n                // Make a POST request to the Word upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/word-upload/\", formData)\r\n                    .then(response => {\r\n                        // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.docx_text_it\r\n                            this.txt_file = response.data.txt_file_docx_it\r\n                        }\r\n                        // Otherwise, set the text and TXT file to the English versions.\r\n                        else {\r\n                            this.text = response.data.docx_text_en\r\n                            this.txt_file = response.data.txt_file_docx_en\r\n\r\n                        }\r\n\r\n                        // Set the file_uploaded property to the title of the uploaded file.\r\n                        this.file_uploaded = response.data.title\r\n                    })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\r\n                // Make a POST request to the XLSX upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/xlsx-upload/\", formData)\r\n                    .then(response => {\r\n                        // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.xlsx_text_it\r\n                            this.txt_file = response.data.txt_file_xlsx_it\r\n                        }\r\n                        // Otherwise, set the text and TXT file to the English versions.\r\n                        else {\r\n                            this.text = response.data.xlsx_text_en\r\n                            this.txt_file = response.data.txt_file_xlsx_en\r\n                        }\r\n                        // Set the file_uploaded property to the title of the uploaded file.\r\n                        this.file_uploaded = response.data.title\r\n                    })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else {\r\n                // If the file type is not supported, display an error message.\r\n                alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\r\n            }\r\n            // Make a POST request to the get-config API endpoint to retrieve the available configurations and sets the relative list based on the language\r\n\r\n            axios.post(\"http://localhost:8000/api/get-config/\" ,{'language': this.language})\r\n                .then(response => {\r\n                    if(this.language=='it'){\r\n                        this.available_configs_it = response.data.configs;\r\n                    }\r\n                    else {\r\n                        this.available_configs_en = response.data.configs;\r\n                    }\r\n\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // this function modify the text\r\n        updateText() {\r\n            // Make a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/update-text/\", {\r\n                // The text to be edited\r\n                text_toEdit: this.editText,\r\n                // The name of the file to be edited\r\n                file_toEdit: this.txt_file,\r\n                // The source file from which the original text was obtained\r\n                file_source: this.file_uploaded,\r\n                // The language of the text\r\n                language: this.language\r\n            })\r\n                // If the request was successful, update the text and file variables and disable editing mode\r\n                .then(response => {\r\n                    this.text = this.editText;\r\n                    this.txt_file = response.data.txt_file_edited;\r\n                    this.editing = false;\r\n                })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // This function loads a configuration file for the NER model\r\n        loadCnf() {\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/load-config/\", {\r\n                // The path to the text file to be analyzed\r\n                file_txt_path: this.txt_file,\r\n                // The language of the text\r\n                language: this.language,\r\n                // The text to be analyzed\r\n                text: this.text,\r\n                // The source file from which the original text was obtained\r\n                f_up: this.file_uploaded\r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                    this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                    this.file_config = response.data.jsonNER\r\n                    this.loaded = true\r\n                    this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // This function filters the NER output by a selected set of entities\r\n        filter() {\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/filter/\", {\r\n                // The path to the text file to be analyzed\r\n                file_txt_path: this.txt_file,\r\n                // The language of the text\r\n                language: this.language,\r\n                // The text to be analyzed\r\n                text: this.text,\r\n                // The set of entities to filter by\r\n                selectedEn: this.selectedEntities\r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                    this.high_text = response.data.high;\r\n                    this.colors = response.data.colors;\r\n                    this.high_entities = response.data.ent;\r\n                    this.question = null;\r\n                })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // This function performs question-answering on the given text\r\n        question_answering() {\r\n            // If the language is Italian and no model has been chosen, default to 'anakin87/electra-italian-xxl-cased-squad-it'\r\n            if (this.language == \"it\" & this.model_choosen == null) {\r\n                this.model_choosen = 'anakin87/electra-italian-xxl-cased-squad-it';\r\n            } else {\r\n                // Otherwise, if no model has been chosen, default to 'deepset/roberta-base-squad2'\r\n                if (this.model_choosen == null)\r\n                    this.model_choosen = 'deepset/roberta-base-squad2';\r\n            }\r\n\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/qa/\", {\r\n                // The question to be answered\r\n                question: this.question,\r\n                // The name of the question-answering model to use\r\n                model: this.model_choosen,\r\n                // The text to be analyzed\r\n                text: this.text\r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                    this.high_text = response.data.high_qa;\r\n                    this.high_entities = []\r\n                    this.colors = []\r\n                    this.answer = response.data.answer\r\n                    this.selectedEntities = []\r\n                })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // this function save a question \r\n        saveQuestion() {\r\n            // Send a POST request to the API endpoint to save the question and answer\r\n            axios.post(\"http://localhost:8000/api/save-question/\", {\r\n                name_entity: this.name_entity, // Name of the entity\r\n                model: this.model_choosen, // Model used for the question answering\r\n                question: this.question, // The question that was asked\r\n                answer: this.answer, // The answer to the question\r\n                txt_path: this.txt_file, // Path to the text file being analyzed\r\n                language: this.language, // Language of the text file\r\n                config_to_change: this.config_to_change, // Name of the configuration being modified\r\n                new_c: this.new_config, // Boolean indicating if a new configuration is being created\r\n                name_config_new: this.name_new_config, // Name of the new configuration being created\r\n                file_c: this.file_config // The configuration file being used\r\n            })\r\n                .then(response => {\r\n                    // If the response indicates an error, display an alert\r\n                    if (response.data.cod == -1) {\r\n                        alert(response.data.res)\r\n                    }\r\n                    // Otherwise, update the state variables and retrieve the updated configuration and available configurations\r\n                    else {\r\n                        this.show_modal = false; // Hide the modal used to save the question\r\n                        this.config_to_change = null; // Clear the name of the configuration being modified\r\n                        this.new_config = false; // Reset the flag indicating if a new configuration is being created\r\n                        this.name_entity = null; // Clear the name of the entity\r\n                        this.question = null; // Clear the current question\r\n                        this.name_new_config = null; // Clear the name of the new configuration being created\r\n                        this.model_choosen = null; // Clear the name of the model used for question answering\r\n\r\n                    }\r\n\r\n                    // Retrieve the updated configuration\r\n                    axios.post(\"http://localhost:8000/api/load-config/\", {\r\n                        file_txt_path: this.txt_file, // Path to the text file being analyzed\r\n                        language: this.language, // Language of the text file\r\n                        text: this.text, // The text being analyzed\r\n                        f_up: this.file_uploaded // The uploaded file, if any\r\n                    })\r\n                        .then(response => {\r\n                            this.dictionaryObj = JSON.parse(response.data.jsonner_str); // Parse the configuration as a JSON object\r\n                            this.file_config = response.data.jsonNER // Store the configuration file\r\n                            this.loaded = true // Set the loaded flag to true\r\n                            this.model_entity = JSON.parse(response.data.entity_model_current) // Parse the model entity as a JSON object\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error); // Log any errors to the console\r\n                            alert(error); // Display an alert with the error message\r\n                        });\r\n\r\n                    // Retrieve the available configurations\r\n                    axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                        .then(response => {\r\n                            if (this.language == 'it') {\r\n                                this.available_configs_it = response.data.configs; // Store the Italian configurations\r\n                            }\r\n                            else {\r\n                                this.available_configs_en = response.data.configs; // Store the English configurations\r\n                            }\r\n\r\n\r\n                        }).catch(error => {\r\n                            console.log(error); // Log any errors to the console\r\n                            alert(error); // Display an alert with the error message\r\n                        });\r\n\r\n                })\r\n                .catch(error => {\r\n                    console.log(error); // Log any errors to the console\r\n                    alert(error); // Display an alert with the error message\r\n                });\r\n        },\r\n\r\n        // This function changes the configuration settings and loads the updated configuration file.\r\n        changeConfig() {\r\n            // Send a POST request to the API endpoint to change the configuration settings.\r\n            axios.post(\"http://localhost:8000/api/change-cnf/\", { config_name: this.config_to_change, txt: this.txt_file, language: this.language, context: this.text })\r\n                .then(response => {\r\n                    // If the response from the API contains an error code, display an alert with the error message.\r\n                    this.code = response.data.cod\r\n                    if (this.code == -1) {\r\n                        alert(response.data.res)\r\n                    }\r\n                    // If there is no error, load the updated configuration file and update the available configuration options.\r\n                    else {\r\n                        // Clear the current configuration selection.\r\n                        this.config_to_change = null;\r\n                        // Send a POST request to the API endpoint to load the updated configuration file.\r\n                        axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                            .then(response => {\r\n                                // Parse the loaded JSON data into an object and set it to a variable.\r\n                                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                                // Set the loaded configuration file to a variable.\r\n                                this.file_config = response.data.jsonNER\r\n                                // Set the loaded flag to true to indicate that the configuration has been loaded.\r\n                                this.loaded = true\r\n                                // Parse the current entity model into an object and set it to a variable.\r\n                                this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                            })\r\n                            .catch(error => {\r\n                                // Display an alert with the error message if the configuration file fails to load.\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n                        // Send a POST request to the API endpoint to get the available configuration options.\r\n                        axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                            .then(response => {\r\n                                // If the language is Italian, update the available Italian configuration options.\r\n                                if (this.language == 'it') {\r\n                                    this.available_configs_it = response.data.configs;\r\n                                }\r\n                                // If the language is English, update the available English configuration options.\r\n                                else {\r\n                                    this.available_configs_en = response.data.configs;\r\n                                }\r\n                            }).catch(error => {\r\n                                // Display an alert with the error message if the configuration options fail to load.\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    // Display an alert with the error message if there is an error with the POST request.\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        // This function deletes entities from the configuration file.\r\n        deleteEn() {\r\n            // Send a POST request to the API endpoint to delete the specified entities.\r\n            axios.post(\"http://localhost:8000/api/delete-entities/\", { 'file_config': this.file_config, 'entities': this.todelete_entities })\r\n                .then(response => {\r\n                    // If the response from the API contains an error code, display an alert with the error message.\r\n                    if (response.data.cod == -1) {\r\n                        alert(response.data.res)\r\n                    }\r\n                    // If there is no error, reload the configuration file and update the available configuration options.\r\n                    else {\r\n                        // Clear the current list of entities to delete.\r\n                        this.todelete_entities = []\r\n                        // Send a POST request to the API endpoint to load the updated configuration file.\r\n                        axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                            .then(response => {\r\n                                // Parse the loaded JSON data into an object and set it to a variable.\r\n                                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                                // Set the loaded configuration file to a variable.\r\n                                this.file_config = response.data.jsonNER\r\n                                // Set the loaded flag to true to indicate that the configuration has been loaded.\r\n                                this.loaded = true\r\n                                // Parse the current entity model into an object and set it to a variable.\r\n                                this.model_entity = JSON.parse(response.data.entity_model_current)\r\n                            })\r\n                            .catch(error => {\r\n                                // Display an alert with the error message if the configuration file fails to load.\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n                        // Send a POST request to the API endpoint to get the available configuration options.\r\n                        axios.post(\"http://localhost:8000/api/get-config/\", { 'language': this.language })\r\n                            .then(response => {\r\n                                // If the language is Italian, update the available Italian configuration options.\r\n                                if (this.language == 'it') {\r\n                                    this.available_configs_it = response.data.configs;\r\n                                }\r\n                                // If the language is English, update the available English configuration options.\r\n                                else {\r\n                                    this.available_configs_en = response.data.configs;\r\n                                }\r\n                            }).catch(error => {\r\n                                // Display an alert with the error message if the configuration options fail to load.\r\n                                console.log(error);\r\n                                alert(error);\r\n                            });\r\n                    }\r\n                }).catch(error => {\r\n                    // Display an alert with the error message if there is an error with the POST request.\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.color-box {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin: 5px;\r\n    display: inline-block;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}