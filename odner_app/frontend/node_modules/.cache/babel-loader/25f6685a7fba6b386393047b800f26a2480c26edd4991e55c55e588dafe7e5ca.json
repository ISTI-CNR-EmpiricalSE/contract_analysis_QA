{"ast":null,"code":"// This module imports the Axios library, which is a JavaScript library used to make HTTP requests from node.js\nimport axios from \"axios\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap';\nimport $ from 'jquery';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport Notification from './Notification.vue';\n\n// Export a default object containing a data function\nexport default {\n  components: {\n    Notification\n  },\n  watch: {\n    notificationMessage(newVal) {\n      if (newVal) {\n        // Set a timeout to hide the notification after 3 seconds\n        setTimeout(() => {\n          this.notificationMessage = null;\n        }, 3000);\n      }\n    }\n  },\n  data() {\n    // Initialize properties in the returned object\n    return {\n      notificationMessage: null,\n      notificationType: 'success',\n      // A string that will hold the text entered by the user, initially set to null\n      text: null,\n      // A file object that will hold the uploaded text file, initially set to null\n      txt_file: null,\n      // A boolean value that indicates whether the user is currently editing text, initially set to false\n      editing: false,\n      // A string that will hold the edited text, initially set to null\n      editText: null,\n      // A file object that will hold the uploaded configuration file, initially set to null\n      file_uploaded: null,\n      // A string that indicates the language of the text, initially set to \"it\" (Italian)\n      language: 'it',\n      // An object that will hold the dictionary of entities found in the text, initially set to null\n      dictionaryObj: null,\n      // An array that will hold the currently selected entities, initially set to an empty array\n      selectedEntities: [],\n      // An array that will hold the entities to be deleted, initially set to an empty array\n      todelete_entities: [],\n      // A string that will hold the text with the selected entities highlighted, initially set to null\n      high_text: null,\n      // A boolean value that indicates whether the data has finished loading, initially set to false\n      loaded: false,\n      // An array that will hold the colors for the highlighted entities, initially set to an empty array\n      colors: [],\n      // An array that will hold the entities that have been highlighted, initially set to an empty array\n      high_entities: [],\n      // An array that will hold the available configurations for English language, initially set to an empty array\n      available_configs_en: [],\n      // An array that will hold the available configurations for Italian language, initially set to an empty array\n      available_configs_it: [],\n      // A string that indicates the configuration to be changed, initially set to null\n      config_to_change: null,\n      // A string that holds the question to be answered, initially set to null\n      question: null,\n      // A string that indicates the chosen language model, initially set to null\n      model_choosen: null,\n      // An array that holds the available English language models, initially set to an array of model names\n      model_available_en: [\"deepset/roberta-base-squad2\", \"distilbert-base-cased-distilled-squad\", \"bert-large-uncased-whole-word-masking-finetuned-squad\", \"squirro/albert-base-v2-squad_v2\", \"ahotrod/electra_large_discriminator_squad2_512\"],\n      // An array that holds the available Italian language models, initially set to an array of model names\n      model_available_it: [\"anakin87/electra-italian-xxl-cased-squad-it\"],\n      // A string that holds the answer to the question, initially set to null\n      answer: null,\n      // A file object that holds the uploaded configuration file, initially set to null\n      file_config: null,\n      // A string that indicates the model entity, initially set to null\n      model_entity: null,\n      // A string that indicates the name of the entity, initially set to null\n      name_entity: null,\n      // A boolean that indicates if is necessary create a new configuration, initially set to false\n      new_config: false,\n      // A string tha indicates tha name of the configuration to create, initially set to null\n      name_new_config: null,\n      // An integer that indicate the result of the response\n      code: 0,\n      // A string that indicate the dictionary_obj, initially set to null\n      str_dict: null,\n      loading: false,\n      loading_editing: false,\n      loading_config: false,\n      loading_qa: false,\n      loading_change: false,\n      saving_question: false,\n      show_upload: false,\n      show_edited: false,\n      show_change: false,\n      show_load: false,\n      shoe_delete: false\n    };\n  },\n  methods: {\n    // this function upload a file \n    uploadFile() {\n      this.loading = true;\n      // Create a new FormData object.\n      let formData = new FormData();\n      // Add the file object and the language property to the form data object.\n      formData.append(\"file\", this.$refs.file.files[0]);\n      formData.append(\"language\", this.language);\n      // Get the file object from the input element.\n      let file = this.$refs.file.files[0];\n      // Check the file type to determine which API endpoint to call.\n      if (file.type === \"application/pdf\") {\n        // Make a POST request to the PDF upload API endpoint.\n        axios.post(\"http://localhost:8000/api/pdf-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language == \"it\") {\n            this.text = response.data.pdf_text_it;\n            this.txt_file = response.data.txt_file_pdf_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.pdf_text_en;\n            this.txt_file = response.data.txt_file_pdf_en;\n          }\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n          this.loading = false;\n          this.show_upload = true;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n          this.loading = false;\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\n        // Make a POST request to the Word upload API endpoint.\n        axios.post(\"http://localhost:8000/api/word-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language === \"it\") {\n            this.text = response.data.docx_text_it;\n            this.txt_file = response.data.txt_file_docx_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.docx_text_en;\n            this.txt_file = response.data.txt_file_docx_en;\n          }\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n          this.loading = true;\n          this.show_upload = true;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n          this.loading = false;\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        // Make a POST request to the XLSX upload API endpoint.\n        axios.post(\"http://localhost:8000/api/xlsx-upload/\", formData).then(response => {\n          // If the language is Italian, set the text and TXT file to the Italian versions.\n          if (this.language === \"it\") {\n            this.text = response.data.xlsx_text_it;\n            this.txt_file = response.data.txt_file_xlsx_it;\n          }\n          // Otherwise, set the text and TXT file to the English versions.\n          else {\n            this.text = response.data.xlsx_text_en;\n            this.txt_file = response.data.txt_file_xlsx_en;\n          }\n          // Set the file_uploaded property to the title of the uploaded file.\n          this.file_uploaded = response.data.title;\n          this.loading = false;\n          this.show_upload = true;\n        })\n        // If there was an error, log it to the console and show an alert with the error message\n        .catch(error => {\n          console.log(error);\n          alert(error);\n          this.loading = false;\n        });\n      } else {\n        // If the file type is not supported, display an error message.\n        alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\n        this.loading = false;\n      }\n\n      // Make a POST request to the get-config API endpoint to retrieve the available configurations and sets the relative list based on the language\n      axios.post(\"http://localhost:8000/api/get-config/\", {\n        \"language\": this.language\n      }).then(response => {\n        if (this.language == \"it\") {\n          this.available_configs_it = response.data.configs;\n        } else {\n          this.available_configs_en = response.data.configs;\n        }\n        // If there was an error, log it to the console and show an alert with the error message\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n        this.loading = false;\n      });\n      setTimeout(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      }, 500);\n    },\n    // this function modify the text\n    updateText() {\n      this.loading_editing = true;\n      this.scrollDown();\n      // Make a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/update-text/\", {\n        // The text to be edited\n        text_toEdit: this.editText,\n        // The name of the file to be edited\n        file_toEdit: this.txt_file,\n        // The source file from which the original text was obtained\n        file_source: this.file_uploaded,\n        // The language of the text\n        language: this.language\n      })\n      // If the request was successful, update the text and file variables and disable editing mode\n      .then(response => {\n        this.text = this.editText;\n        this.txt_file = response.data.txt_file_edited;\n        this.editing = false;\n        this.loading_editing = false;\n        this.show_edited = true;\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n        this.loading_editing = false;\n      });\n    },\n    // This function loads a configuration file for the NER model\n    loadCnf() {\n      this.loading_config = true;\n      this.scrollDown();\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/load-config/\", {\n        // The path to the text file to be analyzed\n        file_txt_path: this.txt_file,\n        // The language of the text\n        language: this.language,\n        // The text to be analyzed\n        text: this.text,\n        // The source file from which the original text was obtained\n        f_up: this.file_uploaded\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n        this.file_config = response.data.jsonNER;\n        this.loaded = true;\n        this.model_entity = JSON.parse(response.data.entity_model_current);\n        this.str_dict = response.data.jsondict_str;\n        this.loading_config = false;\n        this.scrollDown();\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n        this.loading_config = false;\n      });\n    },\n    // This function filters the NER output by a selected set of entities\n    filter() {\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/filter/\", {\n        // The path to the text file to be analyzed\n        file_txt_path: this.txt_file,\n        // The language of the text\n        language: this.language,\n        // The text to be analyzed\n        text: this.text,\n        // The set of entities to filter by\n        selectedEn: this.selectedEntities\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.high_text = response.data.high;\n        this.colors = response.data.colors;\n        this.high_entities = response.data.ent;\n        this.question = null;\n        setTimeout(() => {\n          window.scrollTo(0, document.body.scrollTop + 30);\n        }, 500);\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function performs question-answering on the given text\n    question_answering() {\n      this.loading_qa = true;\n      this.scrollDown();\n      // If the language is Italian and no model has been chosen, default to 'anakin87/electra-italian-xxl-cased-squad-it'\n      if (this.language == \"it\" & this.model_choosen == null) {\n        this.model_choosen = \"anakin87/electra-italian-xxl-cased-squad-it\";\n      } else {\n        // Otherwise, if no model has been chosen, default to 'deepset/roberta-base-squad2'\n        if (this.model_choosen == null) this.model_choosen = \"deepset/roberta-base-squad2\";\n      }\n      // Send a POST request to the specified API endpoint with the following data:\n      axios.post(\"http://localhost:8000/api/qa/\", {\n        // The question to be answered\n        question: this.question,\n        // The name of the question-answering model to use\n        model: this.model_choosen,\n        // The text to be analyzed\n        text: this.text\n      })\n      // If the request was successful, update some variables with the response data\n      .then(response => {\n        this.high_text = response.data.high_qa;\n        this.high_entities = [];\n        this.colors = [];\n        this.answer = response.data.answer;\n        this.selectedEntities = [];\n        this.loading_qa = false;\n        setTimeout(() => {\n          window.scrollTo(0, document.body.scrollTop - 30);\n        }, 500);\n      })\n      // If there was an error, log it to the console and show an alert with the error message\n      .catch(error => {\n        console.log(error);\n        alert(error);\n        this.loading_qa = true;\n      });\n    },\n    // this function save a question \n    saveQuestion() {\n      this.saving_question = true;\n      // Send a POST request to the API endpoint to save the question and answer\n      axios.post(\"http://localhost:8000/api/save-question/\", {\n        name_entity: this.name_entity,\n        model: this.model_choosen,\n        question: this.question,\n        answer: this.answer,\n        txt_path: this.txt_file,\n        language: this.language,\n        config_to_change: this.config_to_change,\n        new_c: this.new_config,\n        name_config_new: this.name_new_config,\n        file_c: this.file_config // The configuration file being used\n      }).then(response => {\n        // If the response indicates an error, display an alert\n        if (response.data.cod == -1) {\n          alert(response.data.res);\n          this.saving_question = false;\n        }\n        // Otherwise, update the state variables and retrieve the updated configuration and available configurations\n        else {\n          this.config_to_change = null; // Clear the name of the configuration being modified\n          this.new_config = false; // Reset the flag indicating if a new configuration is being created\n          this.name_entity = null; // Clear the name of the entity\n          this.question = null; // Clear the current question\n          this.name_new_config = null; // Clear the name of the new configuration being created\n          this.model_choosen = null; // Clear the name of the model used for question answering\n          this.high_text = null;\n          this.saving_question = false;\n\n          // Retrieve the updated configuration\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded // The uploaded file, if any\n          }).then(response => {\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str); // Parse the configuration as a JSON object\n            this.file_config = response.data.jsonNER; // Store the configuration file\n            this.loaded = true; // Set the loaded flag to true\n            this.model_entity = JSON.parse(response.data.entity_model_current); // Parse the model entity as a JSON object\n            this.str_dict = response.data.jsondict_str;\n          }).catch(error => {\n            console.log(error); // Log any errors to the console\n            alert(error); // Display an alert with the error message\n\n            this.saving_question = false;\n          });\n          // Retrieve the available configurations\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            \"language\": this.language\n          }).then(response => {\n            if (this.language == \"it\") {\n              this.available_configs_it = response.data.configs; // Store the Italian configurations\n            } else {\n              this.available_configs_en = response.data.configs; // Store the English configurations\n            }\n          }).catch(error => {\n            console.log(error); // Log any errors to the console\n            alert(error); // Display an alert with the error message\n\n            this.saving_question = false;\n          });\n          setTimeout(() => {\n            window.scrollTo(0, document.body.scrollHeight);\n          }, 500);\n        }\n      }).catch(error => {\n        console.log(error); // Log any errors to the console\n        alert(error); // Display an alert with the error message\n\n        this.saving_question = false;\n      });\n    },\n    // This function changes the configuration settings and loads the updated configuration file.\n    changeConfig() {\n      this.loading_change = true;\n      this.scrollDown();\n      // Send a POST request to the API endpoint to change the configuration settings.\n      axios.post(\"http://localhost:8000/api/change-cnf/\", {\n        config_name: this.config_to_change,\n        txt: this.txt_file,\n        language: this.language,\n        context: this.text\n      }).then(response => {\n        // If the response from the API contains an error code, display an alert with the error message.\n        this.code = response.data.cod;\n        if (this.code == -1) {\n          alert(response.data.res);\n          this.loading_change = false;\n        }\n        // If there is no error, load the updated configuration file and update the available configuration options.\n        else {\n          // Clear the current configuration selection.\n          this.config_to_change = null;\n          // Send a POST request to the API endpoint to load the updated configuration file.\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            // Parse the loaded JSON data into an object and set it to a variable.\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            // Set the loaded configuration file to a variable.\n            this.file_config = response.data.jsonNER;\n            // Set the loaded flag to true to indicate that the configuration has been loaded.\n            this.loaded = true;\n            // Parse the current entity model into an object and set it to a variable.\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n            // JSON string of the dictionary\n            this.str_dict = response.data.jsondict_str;\n          }).catch(error => {\n            // Display an alert with the error message if the configuration file fails to load.\n            console.log(error);\n            alert(error);\n            this.loading_change = false;\n          });\n          // Send a POST request to the API endpoint to get the available configuration options.\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            \"language\": this.language\n          }).then(response => {\n            // If the language is Italian, update the available Italian configuration options.\n            if (this.language == \"it\") {\n              this.available_configs_it = response.data.configs;\n            }\n            // If the language is English, update the available English configuration options.\n            else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            // Display an alert with the error message if the configuration options fail to load.\n            console.log(error);\n            alert(error);\n            this.loading_change = false;\n          });\n          this.loading_change = false;\n        }\n        setTimeout(() => {\n          window.scrollTo(0, document.body.scrollHeight);\n        }, 500);\n      }).catch(error => {\n        // Display an alert with the error message if there is an error with the POST request.\n        console.log(error);\n        alert(error);\n        this.loading_change = false;\n      });\n    },\n    // This function deletes entities from the configuration file.\n    deleteEn() {\n      // Send a POST request to the API endpoint to delete the specified entities.\n      axios.post(\"http://localhost:8000/api/delete-entities/\", {\n        \"file_config\": this.file_config,\n        \"entities\": this.todelete_entities\n      }).then(response => {\n        // If the response from the API contains an error code, display an alert with the error message.\n        if (response.data.cod == -1) {\n          alert(response.data.res);\n        }\n        // If there is no error, reload the configuration file and update the available configuration options.\n        else {\n          // Clear the current list of entities to delete.\n          this.todelete_entities = [];\n          this.selectedEntities = [];\n          this.colors = [];\n          this.high_text = null;\n          // Send a POST request to the API endpoint to load the updated configuration file.\n          axios.post(\"http://localhost:8000/api/load-config/\", {\n            file_txt_path: this.txt_file,\n            language: this.language,\n            text: this.text,\n            f_up: this.file_uploaded\n          }).then(response => {\n            // Parse the loaded JSON data into an object and set it to a variable.\n            this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n            // Set the loaded configuration file to a variable.\n            this.file_config = response.data.jsonNER;\n            // Set the loaded flag to true to indicate that the configuration has been loaded.\n            this.loaded = true;\n            // Parse the current entity model into an object and set it to a variable.\n            this.model_entity = JSON.parse(response.data.entity_model_current);\n            // JSON string of the dictionary\n            this.str_dict = response.data.jsondict_str;\n          }).catch(error => {\n            // Display an alert with the error message if the configuration file fails to load.\n            console.log(error);\n            alert(error);\n          });\n          // Send a POST request to the API endpoint to get the available configuration options.\n          axios.post(\"http://localhost:8000/api/get-config/\", {\n            \"language\": this.language\n          }).then(response => {\n            // If the language is Italian, update the available Italian configuration options.\n            if (this.language == \"it\") {\n              this.available_configs_it = response.data.configs;\n            }\n            // If the language is English, update the available English configuration options.\n            else {\n              this.available_configs_en = response.data.configs;\n            }\n          }).catch(error => {\n            // Display an alert with the error message if the configuration options fail to load.\n            console.log(error);\n            alert(error);\n          });\n        }\n      }).catch(error => {\n        // Display an alert with the error message if there is an error with the POST request.\n        console.log(error);\n        alert(error);\n      });\n    },\n    // This function download the json file\n    downloadJson() {\n      // Create a new Blob object with the JSON data string and set the MIME type to application/json\n      const blob = new Blob([this.str_dict], {\n        type: \"application/json\"\n      });\n      // Create a URL for the Blob object\n      const url = URL.createObjectURL(blob);\n      // Create a new anchor element\n      const link = document.createElement(\"a\");\n      // Set the download attribute to the desired file name (in this case, data.json)\n      link.setAttribute(\"download\", \"data.json\");\n      // Set the href attribute to the URL of the Blob object\n      link.setAttribute(\"href\", url);\n      // Append the anchor element to the document body\n      document.body.appendChild(link);\n      // Simulate a click on the anchor element to start the download\n      link.click();\n      // Remove the anchor element from the document body\n      document.body.removeChild(link);\n    },\n    scrollDown() {\n      setTimeout(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      }, 500);\n    }\n  },\n  mounted() {\n    $(window).scroll(function () {\n      if ($(this).scrollTop() < 0) {\n        $('.back-to-top').fadeOut();\n      } else {\n        $('.back-to-top').fadeIn();\n      }\n    });\n    $(window).scroll(function () {\n      if ($(this).scrollTop() == $(document).height()) {\n        $('.back-to-bottom').fadeOut();\n      } else {\n        $('.back-to-bottom').fadeIn();\n      }\n    });\n    $('.back-to-top').click(function () {\n      $('html, body').animate({\n        scrollTop: 0\n      }, 500);\n      return false;\n    });\n    $('.back-to-bottom').click(function () {\n      $('html, body').animate({\n        scrollTop: $(document).height()\n      }, 500);\n      return false;\n    });\n  }\n};","map":{"version":3,"names":["axios","$","Notification","components","watch","notificationMessage","newVal","setTimeout","data","notificationType","text","txt_file","editing","editText","file_uploaded","language","dictionaryObj","selectedEntities","todelete_entities","high_text","loaded","colors","high_entities","available_configs_en","available_configs_it","config_to_change","question","model_choosen","model_available_en","model_available_it","answer","file_config","model_entity","name_entity","new_config","name_new_config","code","str_dict","loading","loading_editing","loading_config","loading_qa","loading_change","saving_question","show_upload","show_edited","show_change","show_load","shoe_delete","methods","uploadFile","formData","FormData","append","$refs","file","files","type","post","then","response","pdf_text_it","txt_file_pdf_it","pdf_text_en","txt_file_pdf_en","title","catch","error","console","log","alert","docx_text_it","txt_file_docx_it","docx_text_en","txt_file_docx_en","xlsx_text_it","txt_file_xlsx_it","xlsx_text_en","txt_file_xlsx_en","configs","window","scrollTo","document","body","scrollHeight","updateText","scrollDown","text_toEdit","file_toEdit","file_source","txt_file_edited","loadCnf","file_txt_path","f_up","JSON","parse","jsonner_str","jsonNER","entity_model_current","jsondict_str","filter","selectedEn","high","ent","scrollTop","question_answering","model","high_qa","saveQuestion","txt_path","new_c","name_config_new","file_c","cod","res","changeConfig","config_name","txt","context","deleteEn","downloadJson","blob","Blob","url","URL","createObjectURL","link","createElement","setAttribute","appendChild","click","removeChild","mounted","scroll","fadeOut","fadeIn","height","animate"],"sources":["src/components/UploadEdit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <nav class=\"navbar sticky-top bg-body-tertiary\" style=\"background-color: #006cf9d9;\">\r\n        <div class=\"container-fluid\">\r\n          ON-DEMAND NER\r\n        </div>\r\n      </nav>\r\n      \r\n      \r\n      <div>\r\n        <notification v-if=\"notificationMessage\" :message=\"notificationMessage\" :type=\"notificationType\"></notification>\r\n      </div>\r\n        \r\n            <div class=\"row justify-content-center\">\r\n                <div class=\"col-md-6\">\r\n\r\n                    \r\n\r\n                    <div>\r\n                    <form @submit.prevent=\"uploadFile();\">\r\n                        <div class=\"mb-3\">\r\n                            <label for=\"file-input\" class=\"form-label\">Choose file:</label>\r\n                            <input id=\"file-input\" type=\"file\" class=\"form-control\" ref=\"file\" accept=\".pdf,.docx,.xlsx\">\r\n                        </div>\r\n                        <div class=\"mb-3\">\r\n                            <label for=\"language-select\" class=\"form-label\">Select language:</label>\r\n                            <select id=\"language-select\" class=\"form-select\" v-model=\"language\">\r\n                                <option value=\"en\">English</option>\r\n                                <option value=\"it\">Italian</option>\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"d-grid gap-2\">\r\n                            <button type=\"submit\" class=\"btn btn-primary\" @click=\"dictionaryObj=null; str_dict=null; loaded = false; selectedEntities = []; high_entities = []; colors = []; high_text = null; colors = []; text = null;\">Upload new file</button>\r\n                        </div>\r\n                    </form>\r\n                    <div v-if=\"loading\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                        <strong>Loading upload...</strong>\r\n                        <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n        \r\n\r\n                    <br>\r\n\r\n                    <div v-if=\"text\" > <!-- Renders the selected entities only if there are any -->\r\n\r\n                        <h2>Extracted text</h2>\r\n                        \r\n                        <div class=\"mb-3\">\r\n                            <!-- If editing is not enabled and no high text is present, display a readonly textarea with the extracted text -->\r\n                            <textarea v-if=\"!editing && !high_text\" v-model=\"text\" class=\"form-control\" style=\"height: 300px;\" readonly></textarea>\r\n                        \r\n                            <!-- If editing is enabled and no high text is present, display an editable textarea with the extracted text -->\r\n                            <textarea v-else-if=\"editing && !high_text\" v-model=\"editText\" class=\"form-control\" style=\"height: 300px;\"></textarea>\r\n                        \r\n                            <!-- If high text is present, display a div containing the highlighted text with entity colors -->\r\n                            <div v-if=\"high_text\" v-html=\"high_text\"  class=\"form-control\" style=\"height: 300px; overflow: auto;\"></div>\r\n                            \r\n                                <!-- Button to reset the selected entities and their highlighting -->\r\n                                    <button v-if=\"high_text\" @click=\"selectedEntities = []; high_entities = []; colors = []; high_text = null; colors = []; question = null; scrollDown();\" class=\"btn btn-danger\">Reset</button>\r\n                                    <button v-if=\"question && high_text\" type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\" style=\"margin-left: 10px\">\r\n                                            Save Question\r\n                                        </button>\r\n                                    <div v-if=\"saving_question\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                                        <strong>Loading configuration...</strong>\r\n                                        <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                            \r\n                                    </div>\r\n                            \r\n                        </div>\r\n\r\n                        <!-- If entity colors are present, display a series of color boxes representing each entity with its associated text -->\r\n                        <div v-if=\"colors.length > 0\">\r\n                            <div class=\"legend mb-3\">\r\n                                <div class=\"legend-title\">Legend:</div>\r\n                                <div v-for=\"(color, index) in colors\" :key=\"index\" class=\"legend-item\">\r\n                                <div class=\"color-box\" :style=\"{ backgroundColor: color }\"></div>\r\n                                <div class=\"entity-name\">{{ high_entities[index] }}</div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        \r\n                        <div class=\"mb-3\">\r\n                            <!-- If editing is not enabled and no high text is present and the file is not yet loaded, display an \"Edit\" button -->\r\n                            <button v-if=\"!editing && !high_text\" @click=\"editText = text; editing = true\" class=\"btn btn-primary\">Edit</button>\r\n                            \r\n                            <!-- If editing is enabled, display \"Save\" and \"Cancel\" buttons -->\r\n                            <div v-if=\"editing\">\r\n                                <button @click=\"updateText\" class=\"btn btn-success me-2\" style=\"margin: 5px\">Save</button>    \r\n                                <button @click=\"editing = false\" class=\"btn btn-secondary\" style=\"margin: 5px\">Cancel</button>    \r\n                                <div v-if=\"loading_editing\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                            <strong>Loading changes...</strong>\r\n                            <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                            \r\n                        </div>\r\n                            </div>        \r\n                            \r\n                            \r\n\r\n                            \r\n                                    \r\n\r\n                                    \r\n\r\n                                    <!-- Modal -->\r\n                                    <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                                    <div class=\"modal-dialog\">\r\n                                        <div class=\"modal-content\">\r\n                                        <div class=\"modal-header\">\r\n                                            <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">Choose configuration</h1>\r\n                                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                        </div>\r\n                                        <div class=\"modal-body\">\r\n                                            <!-- If the selected language is Italian, display a select element for Italian configurations -->\r\n                                        <div v-if=\"language == 'it'\" class=\"form-group\">\r\n                                            <label for=\"cnf-it-select\">Available configuration:</label>\r\n                                                <select id=\"cnf-it-select\" v-model=\"config_to_change\" class=\"form-control\">\r\n                                                    \r\n                                                    <option v-for=\"conf in available_configs_it\" :key=\"conf\">{{ conf }}</option>\r\n                                                </select>\r\n                                        </div>\r\n\r\n                                        <!-- If the selected language is not Italian, display a select element for English configurations -->\r\n                                        <div v-else class=\"form-group\">\r\n                                            <label for=\"cnf-en-select\">Available configuration:</label>\r\n                                            <select id=\"cnf-en-select\" v-model=\"config_to_change\" class=\"form-control\">\r\n                                                \r\n                                                <option v-for=\"conf in available_configs_en\" :key=\"conf\">{{ conf }}</option>\r\n                                            </select>\r\n                                        </div>\r\n                                        </div>\r\n                                        <div class=\"modal-footer\">\r\n                                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"changeConfig(), loaded=false\">Save changes</button>\r\n                                        </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    </div>\r\n                                \r\n\r\n                                    \r\n                                \r\n                            \r\n\r\n                            \r\n\r\n                            <!-- This div displays the current configuration -->\r\n                                    <div v-if=\"dictionaryObj\" class=\"my-3\">\r\n                                        <h6>Current configuration:</h6> {{ file_config }}\r\n                                        <div v-if=\"loading_change\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                                        <strong>Loading configuration...</strong>\r\n                                        <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                            \r\n                                    </div>\r\n                                    </div>                            \r\n                        </div>\r\n                        \r\n                        \r\n                        <div v-if=\"loaded==true\"> <!-- Only if is been loaded a configuration -->\r\n                    \r\n                            \r\n                    \r\n                            <div v-if=\"dictionaryObj\" class=\"mt-3\">\r\n                                \r\n                                <div class=\"container\">\r\n                                <table class=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Entity</th>\r\n                                            <th scope=\"col\">Question</th>\r\n                                            <th scope=\"col\">Select</th>\r\n                                            <th scope=\"col\">Model</th>\r\n                                            <th scope=\"col\">Delete</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    \r\n                                    <tbody>\r\n                                        <tr v-for=\"(value, key) in dictionaryObj\" :key=\"key\">\r\n                                            <td>{{ key }}</td>\r\n                                            <td>{{ value }}</td>\r\n                                            <td>\r\n                                                <div class=\"form-check\">\r\n                                                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"selectedEntities\" :value=\"key\">\r\n                                                </div>\r\n                                            </td>\r\n                                            <td>\r\n                                                {{ model_entity[key] }}\r\n                                            </td>\r\n                                            <td>\r\n                                                <div class=\"form-check\" v-if=\"model_entity[key] != 'Spacy'\">\r\n                                                    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"todelete_entities\" :value=\"key\">\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                                \r\n                                <div>\r\n                                <div v-if=\"selectedEntities.length > 0\" class=\"my-4\" style=\"margin: 10px;\">\r\n                                    <h6>Selected Entities:</h6>\r\n\r\n                                    <ul class=\"list-group\">\r\n                                        <li class=\"list-group-item\" v-for=\"entity in selectedEntities\" :key=\"entity\">{{ entity }}</li>\r\n                                    </ul>\r\n\r\n                                    <button class=\"btn btn-primary mt-3\" @click=\"filter() \">Filter Selected</button>\r\n                                    <button class=\"btn btn-danger mt-3\" @click=\"selectedEntities = []\">Reset Selected</button>\r\n                                </div>\r\n\r\n                                <div v-if=\"todelete_entities.length > 0\" class=\"my-4\" style=\"margin: 10px;\">\r\n                                            <h6>Delete Entities:</h6>\r\n\r\n                                        <ul class=\"list-group\">\r\n                                            <li class=\"list-group-item\" v-for=\"entity in todelete_entities\" :key=\"entity\">{{ entity }}</li>\r\n                                        </ul>\r\n\r\n                                        <button type=\"button\" class=\"btn btn-danger mt-3\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal2\">\r\n                                            Delete Selected\r\n                                        </button>\r\n\r\n                                        <button class=\"btn btn-success mt-3\" @click=\"todelete_entities = []\">Reset Selected</button>\r\n\r\n                                        <div class=\"modal fade\" id=\"exampleModal2\" tabindex=\"-1\" aria-labelledby=\"exampleModal2Label\" aria-hidden=\"true\">\r\n                                            <div class=\"modal-dialog\">\r\n                                                <div class=\"modal-content\">\r\n                                                <div class=\"modal-header\">\r\n                                                    <h1 class=\"modal-title fs-5\" id=\"exampleModal2Label\">Are you sure?</h1>\r\n                                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                                </div>\r\n                                                <div class=\"modal-body\">\r\n                                                    Do you really want to delete the selected entities?\r\n                                                </div>\r\n                                                <div class=\"modal-footer\">\r\n                                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteEn\">Yes</button>\r\n                                                </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    </div>\r\n\r\n                                   \r\n                            </div>  \r\n                            \r\n                           \r\n                            \r\n\r\n                            <div>\r\n                                <!-- This button will trigger the configuration change when clicked -->\r\n                                        <button v-if=\"dictionaryObj\" type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" @click=\"selectedEntities = []; high_text = null; colors = [];\">\r\n                                        Change CNF\r\n                                        </button>\r\n                                        <button v-if=\"dictionaryObj\" class=\"btn btn-success me-2\" @click=\"downloadJson\" style=\"margin: 5px\">Download JSON</button>\r\n                                <h5>Type your own question:</h5>\r\n                                <textarea class=\"form-control mb-3\" v-model=\"question\" rows=\"2\" placeholder=\"Insert your question here\"></textarea>\r\n                        \r\n                                <div v-if=\"language === 'it'\" class=\"mb-3\">\r\n                                    <label for=\"model-en-select\">Available Model:</label>\r\n                                    <select id=\"model-en-select\" class=\"form-select\" v-model=\"model_choosen\">\r\n                                    \r\n                                    <option v-for=\"model in model_available_it\" :key=\"model\">{{ model }}</option>                                     \r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div v-else class=\"mb-3\">\r\n                                    <label for=\"model-it-select\">Available Model:</label>\r\n\r\n                                    <select id=\"model-it-select\" class=\"form-select\" v-model=\"model_choosen\">\r\n                                        \r\n                                    <option v-for=\"model in model_available_en\" :key=\"model\">{{ model }}</option>                                     \r\n                                    </select>\r\n                                </div>\r\n\r\n                                <button class=\"btn btn-primary\" @click=\"question_answering\">GO</button>\r\n\r\n                                <div v-if=\"loading_qa\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                                        <strong>Computing answer...</strong>\r\n                                        <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                            \r\n                                    </div>\r\n                                \r\n        \r\n                                <!-- Modal to enter details for saving a question -->\r\n\r\n                                <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                                    <div class=\"modal-dialog\">\r\n                                        <div class=\"modal-content\">\r\n                                        <div class=\"modal-header\">\r\n                                            <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Add Entity</h1>\r\n                                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                        </div>\r\n                                        <div class=\"modal-body\">\r\n                                            <form>\r\n                                                    <!-- Input field for entity name -->\r\n                                                    <div class=\"mb-3\">\r\n                                                        <label for=\"entity-name\" class=\"form-label\">Entity Name:</label>\r\n                                                        <input type=\"text\" id=\"entity-name\" v-model=\"name_entity\" class=\"form-control\">\r\n                                                    </div>\r\n                                                    <!-- Dropdown menu to select the configuration to add the question to -->\r\n                                                    <div class=\"mb-3\">\r\n                                                        <label for=\"check-config\" class=\"form-label\">Select configuration to add question to:</label>\r\n                                                        <!-- Language-specific options for the dropdown menu -->\r\n                                                        <div v-if=\"language == 'it'\">\r\n                                                        <select id=\"cnf-it-select\" v-model=\"config_to_change\" class=\"form-select\">\r\n                                                            <!-- Option elements for Italian configuration names -->\r\n                                                            <option v-for=\"conf in available_configs_it\" :key=\"conf\">{{ conf }}</option>                                     \r\n                                                        </select>\r\n                                                        </div>     \r\n                                                        <div v-else>\r\n                                                        <select id=\"cnf-en-select\" v-model=\"config_to_change\" class=\"form-select\">\r\n                                                            <!-- Option elements for English configuration names -->\r\n                                                            \r\n                                                            <option v-for=\"conf in available_configs_en\" :key=\"conf\">{{ conf }}</option>                                     \r\n                                                        </select>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <!-- Checkbox to indicate if creating a new configuration -->\r\n                                                    <div class=\"form-check mb-3\">\r\n                                                        <input type=\"checkbox\" id=\"new\" v-model=\"new_config\" :value=\"true\" class=\"form-check-input\">\r\n                                                        <label for=\"new\" class=\"form-check-label\">New config?</label>\r\n                                                    </div>\r\n                                                    <!-- Input field for new configuration name, only shown if checkbox is selected -->\r\n                                                    <div v-if=\"new_config\" class=\"mb-3\">\r\n                                                        <label for=\"config-name\" class=\"form-label\">Config Name:</label>\r\n                                                        <input type=\"text\" id=\"config-name\" v-model=\"name_new_config\" class=\"form-control\">\r\n                                                    </div>\r\n                                                \r\n                                                    </form>\r\n                                        </div>\r\n                                        <div class=\"modal-footer\">\r\n                                        \r\n                                            <button type=\"button\" @click.prevent=\"saveQuestion\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\">Save</button>\r\n                                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                        \r\n                                        </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>                      \r\n                        \r\n                            </div>\r\n\r\n                             \r\n                            \r\n\r\n                                \r\n                        </div>\r\n      \r\n                        <div v-else class=\"d-flex justify-content-center my-3\" >\r\n                            <button v-if=\"dictionaryObj==null\" class=\"btn btn-primary\" @click=\"loadCnf();\">Load CNF (last used or default)</button>\r\n                            \r\n                             \r\n                        </div>                        \r\n                        <div v-if=\"loading_config\" class=\"d-flex align-items-center\" style=\"margin: 10px;\">\r\n                                    <strong>Loading configuration...</strong>\r\n                                    <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\r\n                            \r\n                                </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <a href=\"#\" class=\"btn btn-primary btn-lg back-to-bottom\" role=\"button\">\r\n                        <i class=\"fas fa-chevron-down\"></i>\r\n                    </a>\r\n                <a href=\"#\" class=\"btn btn-primary btn-lg back-to-top\" role=\"button\">\r\n                    <i class=\"fas fa-chevron-up\"></i>\r\n                </a>\r\n            </div>\r\n            \r\n</div>\r\n</template>\r\n\r\n<script>\r\n// This module imports the Axios library, which is a JavaScript library used to make HTTP requests from node.js\r\nimport axios from \"axios\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap';\r\nimport $ from 'jquery';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport Notification from './Notification.vue'\r\n\r\n// Export a default object containing a data function\r\nexport default {\r\n    components: {\r\n        Notification\r\n    },\r\n    watch: {\r\n        notificationMessage(newVal) {\r\n            if (newVal) {\r\n                // Set a timeout to hide the notification after 3 seconds\r\n                setTimeout(() => {\r\n                    this.notificationMessage = null\r\n                }, 3000)\r\n            }\r\n        }\r\n    }, \r\n    data() {\r\n        // Initialize properties in the returned object\r\n        return {\r\n            notificationMessage: null,\r\n            notificationType: 'success',\r\n            // A string that will hold the text entered by the user, initially set to null\r\n            text: null,\r\n            // A file object that will hold the uploaded text file, initially set to null\r\n            txt_file: null,\r\n            // A boolean value that indicates whether the user is currently editing text, initially set to false\r\n            editing: false,\r\n            // A string that will hold the edited text, initially set to null\r\n            editText: null,\r\n            // A file object that will hold the uploaded configuration file, initially set to null\r\n            file_uploaded: null,\r\n            // A string that indicates the language of the text, initially set to \"it\" (Italian)\r\n            language: 'it',\r\n            // An object that will hold the dictionary of entities found in the text, initially set to null\r\n            dictionaryObj: null,\r\n            // An array that will hold the currently selected entities, initially set to an empty array\r\n            selectedEntities: [],\r\n            // An array that will hold the entities to be deleted, initially set to an empty array\r\n            todelete_entities: [],\r\n            // A string that will hold the text with the selected entities highlighted, initially set to null\r\n            high_text: null,\r\n            // A boolean value that indicates whether the data has finished loading, initially set to false\r\n            loaded: false,\r\n            // An array that will hold the colors for the highlighted entities, initially set to an empty array\r\n            colors: [],\r\n            // An array that will hold the entities that have been highlighted, initially set to an empty array\r\n            high_entities: [],\r\n            // An array that will hold the available configurations for English language, initially set to an empty array\r\n            available_configs_en: [],\r\n            // An array that will hold the available configurations for Italian language, initially set to an empty array\r\n            available_configs_it: [],\r\n            // A string that indicates the configuration to be changed, initially set to null\r\n            config_to_change: null,\r\n            // A string that holds the question to be answered, initially set to null\r\n            question: null,\r\n            // A string that indicates the chosen language model, initially set to null\r\n            model_choosen: null,\r\n            // An array that holds the available English language models, initially set to an array of model names\r\n            model_available_en: [\"deepset/roberta-base-squad2\", \"distilbert-base-cased-distilled-squad\", \"bert-large-uncased-whole-word-masking-finetuned-squad\", \"squirro/albert-base-v2-squad_v2\", \"ahotrod/electra_large_discriminator_squad2_512\"],\r\n            // An array that holds the available Italian language models, initially set to an array of model names\r\n            model_available_it: [\"anakin87/electra-italian-xxl-cased-squad-it\"],\r\n            // A string that holds the answer to the question, initially set to null\r\n            answer: null,\r\n            // A file object that holds the uploaded configuration file, initially set to null\r\n            file_config: null,\r\n            // A string that indicates the model entity, initially set to null\r\n            model_entity: null,\r\n            // A string that indicates the name of the entity, initially set to null\r\n            name_entity: null,\r\n            // A boolean that indicates if is necessary create a new configuration, initially set to false\r\n            new_config: false,\r\n            // A string tha indicates tha name of the configuration to create, initially set to null\r\n            name_new_config: null,\r\n            // An integer that indicate the result of the response\r\n            code: 0,\r\n            // A string that indicate the dictionary_obj, initially set to null\r\n            str_dict: null,\r\n\r\n            loading : false,\r\n\r\n            loading_editing : false,\r\n\r\n            loading_config: false,\r\n\r\n            loading_qa : false,\r\n\r\n            loading_change: false,\r\n\r\n            saving_question: false,\r\n\r\n            show_upload : false,\r\n\r\n            show_edited : false,\r\n\r\n            show_change : false,\r\n\r\n            show_load : false,\r\n\r\n            shoe_delete : false,\r\n        };\r\n    },\r\n    methods: {\r\n\r\n        \r\n    \r\n        \r\n        // this function upload a file \r\n        uploadFile() {\r\n            this.loading = true;\r\n            // Create a new FormData object.\r\n            let formData = new FormData();\r\n            // Add the file object and the language property to the form data object.\r\n            formData.append(\"file\", this.$refs.file.files[0]);\r\n            formData.append(\"language\", this.language);\r\n            // Get the file object from the input element.\r\n            let file = this.$refs.file.files[0];\r\n            // Check the file type to determine which API endpoint to call.\r\n            if (file.type === \"application/pdf\") {\r\n                // Make a POST request to the PDF upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/pdf-upload/\", formData)\r\n                    .then(response => {\r\n                    // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                    if (this.language == \"it\") {\r\n                        this.text = response.data.pdf_text_it;\r\n                        this.txt_file = response.data.txt_file_pdf_it;\r\n                    }\r\n                    // Otherwise, set the text and TXT file to the English versions.\r\n                    else {\r\n                        this.text = response.data.pdf_text_en;\r\n                        this.txt_file = response.data.txt_file_pdf_en;\r\n                    }\r\n                    // Set the file_uploaded property to the title of the uploaded file.\r\n                    this.file_uploaded = response.data.title;\r\n\r\n                    this.loading = false;\r\n                    this.show_upload=true;\r\n                })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                    this.loading=false;\r\n                });\r\n            }\r\n            else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\r\n                // Make a POST request to the Word upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/word-upload/\", formData)\r\n                    .then(response => {\r\n                    // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                    if (this.language === \"it\") {\r\n                        this.text = response.data.docx_text_it;\r\n                        this.txt_file = response.data.txt_file_docx_it;\r\n                    }\r\n                    // Otherwise, set the text and TXT file to the English versions.\r\n                    else {\r\n                        this.text = response.data.docx_text_en;\r\n                        this.txt_file = response.data.txt_file_docx_en;\r\n                    }\r\n                    // Set the file_uploaded property to the title of the uploaded file.\r\n                    this.file_uploaded = response.data.title;\r\n                    this.loading = true;\r\n                    this.show_upload = true;\r\n                })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                    this.loading = false;\r\n                });\r\n            }\r\n            else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\r\n                // Make a POST request to the XLSX upload API endpoint.\r\n                axios\r\n                    .post(\"http://localhost:8000/api/xlsx-upload/\", formData)\r\n                    .then(response => {\r\n                    // If the language is Italian, set the text and TXT file to the Italian versions.\r\n                    if (this.language === \"it\") {\r\n                        this.text = response.data.xlsx_text_it;\r\n                        this.txt_file = response.data.txt_file_xlsx_it;\r\n                    }\r\n                    // Otherwise, set the text and TXT file to the English versions.\r\n                    else {\r\n                        this.text = response.data.xlsx_text_en;\r\n                        this.txt_file = response.data.txt_file_xlsx_en;\r\n                    }\r\n                    // Set the file_uploaded property to the title of the uploaded file.\r\n                    this.file_uploaded = response.data.title;\r\n                    this.loading = false;\r\n                    this.show_upload = true;\r\n                })\r\n                    // If there was an error, log it to the console and show an alert with the error message\r\n                    .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                    this.loading = false;\r\n                });\r\n            }\r\n            else {\r\n                // If the file type is not supported, display an error message.\r\n                alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\r\n                this.loading = false;\r\n                \r\n            }\r\n\r\n            \r\n            // Make a POST request to the get-config API endpoint to retrieve the available configurations and sets the relative list based on the language\r\n            axios.post(\"http://localhost:8000/api/get-config/\", { \"language\": this.language })\r\n                .then(response => {\r\n                if (this.language == \"it\") {\r\n                    this.available_configs_it = response.data.configs;\r\n                }\r\n                else {\r\n                    this.available_configs_en = response.data.configs;\r\n                }\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n            }).catch(error => {\r\n                console.log(error);\r\n                alert(error);\r\n                this.loading = false;\r\n            });\r\n\r\n            setTimeout(() => {\r\n                window.scrollTo(0, document.body.scrollHeight);\r\n            }, 500);\r\n\r\n            \r\n\r\n        },\r\n        // this function modify the text\r\n        updateText() {\r\n            this.loading_editing=true;\r\n            this.scrollDown();\r\n            // Make a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/update-text/\", {\r\n                // The text to be edited\r\n                text_toEdit: this.editText,\r\n                // The name of the file to be edited\r\n                file_toEdit: this.txt_file,\r\n                // The source file from which the original text was obtained\r\n                file_source: this.file_uploaded,\r\n                // The language of the text\r\n                language: this.language\r\n            })\r\n                // If the request was successful, update the text and file variables and disable editing mode\r\n                .then(response => {\r\n                this.text = this.editText;\r\n                this.txt_file = response.data.txt_file_edited;\r\n                this.editing = false;\r\n                this.loading_editing = false;\r\n                this.show_edited = true;\r\n            })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                console.log(error);\r\n                alert(error);\r\n                this.loading_editing = false;\r\n            });\r\n        },\r\n        // This function loads a configuration file for the NER model\r\n        loadCnf() {\r\n            this.loading_config=true;\r\n            this.scrollDown();\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/load-config/\", {\r\n                // The path to the text file to be analyzed\r\n                file_txt_path: this.txt_file,\r\n                // The language of the text\r\n                language: this.language,\r\n                // The text to be analyzed\r\n                text: this.text,\r\n                // The source file from which the original text was obtained\r\n                f_up: this.file_uploaded\r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                this.file_config = response.data.jsonNER;\r\n                this.loaded = true;\r\n                this.model_entity = JSON.parse(response.data.entity_model_current);\r\n                this.str_dict = response.data.jsondict_str;\r\n                this.loading_config=false;\r\n                this.scrollDown();\r\n\r\n            })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                console.log(error);\r\n                alert(error);\r\n                this.loading_config = false;\r\n            });\r\n\r\n            \r\n        },\r\n        // This function filters the NER output by a selected set of entities\r\n        filter() {\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/filter/\", {\r\n                // The path to the text file to be analyzed\r\n                file_txt_path: this.txt_file,\r\n                // The language of the text\r\n                language: this.language,\r\n                // The text to be analyzed\r\n                text: this.text,\r\n                // The set of entities to filter by\r\n                selectedEn: this.selectedEntities\r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                this.high_text = response.data.high;\r\n                this.colors = response.data.colors;\r\n                this.high_entities = response.data.ent;\r\n                this.question = null;\r\n                setTimeout(() => {\r\n                        window.scrollTo(0, document.body.scrollTop + 30);\r\n                    }, 500);\r\n            })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                console.log(error);\r\n                alert(error);\r\n            });\r\n        },\r\n        // This function performs question-answering on the given text\r\n        question_answering() {\r\n            this.loading_qa=true;\r\n            this.scrollDown();\r\n            // If the language is Italian and no model has been chosen, default to 'anakin87/electra-italian-xxl-cased-squad-it'\r\n            if (this.language == \"it\" & this.model_choosen == null) {\r\n                this.model_choosen = \"anakin87/electra-italian-xxl-cased-squad-it\";\r\n            }\r\n            else {\r\n                // Otherwise, if no model has been chosen, default to 'deepset/roberta-base-squad2'\r\n                if (this.model_choosen == null)\r\n                    this.model_choosen = \"deepset/roberta-base-squad2\";\r\n            }\r\n            // Send a POST request to the specified API endpoint with the following data:\r\n            axios.post(\"http://localhost:8000/api/qa/\", {\r\n                // The question to be answered\r\n                question: this.question,\r\n                // The name of the question-answering model to use\r\n                model: this.model_choosen,\r\n                // The text to be analyzed\r\n                text: this.text\r\n                \r\n            })\r\n                // If the request was successful, update some variables with the response data\r\n                .then(response => {\r\n                this.high_text = response.data.high_qa;\r\n                this.high_entities = [];\r\n                this.colors = [];\r\n                this.answer = response.data.answer;\r\n                this.selectedEntities = [];\r\n\r\n                this.loading_qa = false;\r\n\r\n                setTimeout(() => {\r\n                        window.scrollTo(0, document.body.scrollTop - 30);\r\n                    }, 500);\r\n            })\r\n                // If there was an error, log it to the console and show an alert with the error message\r\n                .catch(error => {\r\n                console.log(error);\r\n                alert(error);\r\n                this.loading_qa = true;\r\n            });\r\n\r\n            \r\n        },\r\n        // this function save a question \r\n        saveQuestion() {\r\n            this.saving_question=true;\r\n            // Send a POST request to the API endpoint to save the question and answer\r\n            axios.post(\"http://localhost:8000/api/save-question/\", {\r\n                name_entity: this.name_entity,\r\n                model: this.model_choosen,\r\n                question: this.question,\r\n                answer: this.answer,\r\n                txt_path: this.txt_file,\r\n                language: this.language,\r\n                config_to_change: this.config_to_change,\r\n                new_c: this.new_config,\r\n                name_config_new: this.name_new_config,\r\n                file_c: this.file_config // The configuration file being used\r\n            })\r\n                .then(response => {\r\n                // If the response indicates an error, display an alert\r\n                if (response.data.cod == -1) {\r\n                    alert(response.data.res);\r\n                    this.saving_question = false;\r\n                }\r\n                // Otherwise, update the state variables and retrieve the updated configuration and available configurations\r\n                else {\r\n                    this.config_to_change = null; // Clear the name of the configuration being modified\r\n                    this.new_config = false; // Reset the flag indicating if a new configuration is being created\r\n                    this.name_entity = null; // Clear the name of the entity\r\n                    this.question = null; // Clear the current question\r\n                    this.name_new_config = null; // Clear the name of the new configuration being created\r\n                    this.model_choosen = null; // Clear the name of the model used for question answering\r\n                    this.high_text = null;\r\n                    this.saving_question=false;\r\n\r\n                    // Retrieve the updated configuration\r\n                        axios.post(\"http://localhost:8000/api/load-config/\", {\r\n                            file_txt_path: this.txt_file,\r\n                            language: this.language,\r\n                            text: this.text,\r\n                            f_up: this.file_uploaded // The uploaded file, if any\r\n                        })\r\n                            .then(response => {\r\n                                this.dictionaryObj = JSON.parse(response.data.jsonner_str); // Parse the configuration as a JSON object\r\n                                this.file_config = response.data.jsonNER; // Store the configuration file\r\n                                this.loaded = true; // Set the loaded flag to true\r\n                                this.model_entity = JSON.parse(response.data.entity_model_current); // Parse the model entity as a JSON object\r\n                                this.str_dict = response.data.jsondict_str;\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error); // Log any errors to the console\r\n                                alert(error); // Display an alert with the error message\r\n                                \r\n                                this.saving_question = false;\r\n                            });\r\n                        // Retrieve the available configurations\r\n                        axios.post(\"http://localhost:8000/api/get-config/\", { \"language\": this.language })\r\n                            .then(response => {\r\n                                if (this.language == \"it\") {\r\n                                    this.available_configs_it = response.data.configs; // Store the Italian configurations\r\n                                }\r\n                                else {\r\n                                    this.available_configs_en = response.data.configs; // Store the English configurations\r\n                                }\r\n                            }).catch(error => {\r\n                                console.log(error); // Log any errors to the console\r\n                                alert(error); // Display an alert with the error message\r\n                                \r\n                                this.saving_question = false;\r\n                            });\r\n                        setTimeout(() => {\r\n                            window.scrollTo(0, document.body.scrollHeight);\r\n                        }, 500);\r\n                }\r\n                \r\n            })\r\n                .catch(error => {\r\n                console.log(error); // Log any errors to the console\r\n                alert(error); // Display an alert with the error message\r\n                \r\n                this.saving_question = false;\r\n            });\r\n        },\r\n        // This function changes the configuration settings and loads the updated configuration file.\r\n        changeConfig() {\r\n            this.loading_change = true;\r\n            this.scrollDown();\r\n            // Send a POST request to the API endpoint to change the configuration settings.\r\n            axios.post(\"http://localhost:8000/api/change-cnf/\", { config_name: this.config_to_change, txt: this.txt_file, language: this.language, context: this.text })\r\n                .then(response => {\r\n                // If the response from the API contains an error code, display an alert with the error message.\r\n                this.code = response.data.cod;\r\n                if (this.code == -1) {\r\n                    alert(response.data.res);\r\n                    this.loading_change = false;\r\n                }\r\n                // If there is no error, load the updated configuration file and update the available configuration options.\r\n                else {\r\n                    // Clear the current configuration selection.\r\n                    this.config_to_change = null;\r\n                    // Send a POST request to the API endpoint to load the updated configuration file.\r\n                    axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                        .then(response => {\r\n                        // Parse the loaded JSON data into an object and set it to a variable.\r\n                        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                        // Set the loaded configuration file to a variable.\r\n                        this.file_config = response.data.jsonNER;\r\n                        // Set the loaded flag to true to indicate that the configuration has been loaded.\r\n                        this.loaded = true;\r\n                        // Parse the current entity model into an object and set it to a variable.\r\n                        this.model_entity = JSON.parse(response.data.entity_model_current);\r\n                        // JSON string of the dictionary\r\n                        this.str_dict = response.data.jsondict_str;\r\n                    })\r\n                        .catch(error => {\r\n                        // Display an alert with the error message if the configuration file fails to load.\r\n                        console.log(error);\r\n                        alert(error);\r\n                        this.loading_change = false;\r\n                    });\r\n                    // Send a POST request to the API endpoint to get the available configuration options.\r\n                    axios.post(\"http://localhost:8000/api/get-config/\", { \"language\": this.language })\r\n                        .then(response => {\r\n                        // If the language is Italian, update the available Italian configuration options.\r\n                        if (this.language == \"it\") {\r\n                            this.available_configs_it = response.data.configs;\r\n                        }\r\n                        // If the language is English, update the available English configuration options.\r\n                        else {\r\n                            this.available_configs_en = response.data.configs;\r\n                        }\r\n                    }).catch(error => {\r\n                        // Display an alert with the error message if the configuration options fail to load.\r\n                        console.log(error);\r\n                        alert(error);\r\n                        this.loading_change = false;\r\n                    });\r\n                    this.loading_change=false;\r\n                }\r\n                setTimeout(() => {\r\n                        window.scrollTo(0, document.body.scrollHeight);\r\n                    }, 500);\r\n            })\r\n                .catch(error => {\r\n                // Display an alert with the error message if there is an error with the POST request.\r\n                console.log(error);\r\n                alert(error);\r\n                this.loading_change = false;\r\n            });\r\n        },\r\n        // This function deletes entities from the configuration file.\r\n        deleteEn() {\r\n            // Send a POST request to the API endpoint to delete the specified entities.\r\n            axios.post(\"http://localhost:8000/api/delete-entities/\", { \"file_config\": this.file_config, \"entities\": this.todelete_entities })\r\n                .then(response => {\r\n                // If the response from the API contains an error code, display an alert with the error message.\r\n                if (response.data.cod == -1) {\r\n                    alert(response.data.res);\r\n                }\r\n                // If there is no error, reload the configuration file and update the available configuration options.\r\n                else {\r\n                    // Clear the current list of entities to delete.\r\n                    this.todelete_entities = [];\r\n                    this.selectedEntities = [];\r\n                    this.colors = [];\r\n                    this.high_text = null;\r\n                    // Send a POST request to the API endpoint to load the updated configuration file.\r\n                    axios.post(\"http://localhost:8000/api/load-config/\", { file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded })\r\n                        .then(response => {\r\n                        // Parse the loaded JSON data into an object and set it to a variable.\r\n                        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                        // Set the loaded configuration file to a variable.\r\n                        this.file_config = response.data.jsonNER;\r\n                        // Set the loaded flag to true to indicate that the configuration has been loaded.\r\n                        this.loaded = true;\r\n                        // Parse the current entity model into an object and set it to a variable.\r\n                        this.model_entity = JSON.parse(response.data.entity_model_current);\r\n                        // JSON string of the dictionary\r\n                        this.str_dict = response.data.jsondict_str;\r\n                    })\r\n                        .catch(error => {\r\n                        // Display an alert with the error message if the configuration file fails to load.\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n                    // Send a POST request to the API endpoint to get the available configuration options.\r\n                    axios.post(\"http://localhost:8000/api/get-config/\", { \"language\": this.language })\r\n                        .then(response => {\r\n                        // If the language is Italian, update the available Italian configuration options.\r\n                        if (this.language == \"it\") {\r\n                            this.available_configs_it = response.data.configs;\r\n                        }\r\n                        // If the language is English, update the available English configuration options.\r\n                        else {\r\n                            this.available_configs_en = response.data.configs;\r\n                        }\r\n                    }).catch(error => {\r\n                        // Display an alert with the error message if the configuration options fail to load.\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Display an alert with the error message if there is an error with the POST request.\r\n                console.log(error);\r\n                alert(error);\r\n            });\r\n        },\r\n        // This function download the json file\r\n        downloadJson() {\r\n            // Create a new Blob object with the JSON data string and set the MIME type to application/json\r\n            const blob = new Blob([this.str_dict], { type: \"application/json\" });\r\n            // Create a URL for the Blob object\r\n            const url = URL.createObjectURL(blob);\r\n            // Create a new anchor element\r\n            const link = document.createElement(\"a\");\r\n            // Set the download attribute to the desired file name (in this case, data.json)\r\n            link.setAttribute(\"download\", \"data.json\");\r\n            // Set the href attribute to the URL of the Blob object\r\n            link.setAttribute(\"href\", url);\r\n            // Append the anchor element to the document body\r\n            document.body.appendChild(link);\r\n            // Simulate a click on the anchor element to start the download\r\n            link.click();\r\n            // Remove the anchor element from the document body\r\n            document.body.removeChild(link);\r\n        },\r\n\r\n        scrollDown(){\r\n            setTimeout(() => {\r\n                window.scrollTo(0, document.body.scrollHeight);\r\n            }, 500);\r\n        }\r\n    },\r\n    \r\n    mounted() {\r\n        \r\n        $(window).scroll(function () {\r\n            if ($(this).scrollTop() <  0) {\r\n                $('.back-to-top').fadeOut();\r\n            } else {\r\n                $('.back-to-top').fadeIn();\r\n            }\r\n        });\r\n\r\n        $(window).scroll(function () {\r\n            if ($(this).scrollTop()  == $(document).height()) {\r\n                $('.back-to-bottom').fadeOut();\r\n            } else {\r\n                $('.back-to-bottom').fadeIn();\r\n            }\r\n        });\r\n        \r\n        $('.back-to-top').click(function () {\r\n            $('html, body').animate({ scrollTop: 0 }, 500);\r\n            return false;\r\n        });\r\n\r\n        $('.back-to-bottom').click(function () {\r\n            $('html, body').animate({ scrollTop: $(document).height() }, 500);\r\n            return false;\r\n        });\r\n    }\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.back-to-top {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  display: none;\r\n}\r\n\r\n.back-to-bottom {\r\n  position: fixed;\r\n  bottom: 80px;\r\n  right: 20px;\r\n  display: none;\r\n}\r\n\r\n.legend {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n}\r\n\r\n.legend-title {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.color-box {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 5px;\r\n  border: 10px black;\r\n}\r\n\r\n.entity-name {\r\n  font-size: 15px;\r\n}\r\n.container {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.table {\r\n    flex-grow: 1;\r\n    margin-right: 10px;\r\n  }\r\n\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}