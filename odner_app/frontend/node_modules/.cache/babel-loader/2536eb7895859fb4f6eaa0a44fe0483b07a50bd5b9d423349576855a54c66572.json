{"ast":null,"code":"import axios from \"axios\"; /* a Javascript library used to make HTTP requests from node. js;  It can be used intercept HTTP requests and responses  */\n\nexport default {\n  data() {\n    return {\n      text: null,\n      txt_file: null,\n      editing: false,\n      editText: null,\n      file_uploaded: null,\n      language: \"it\",\n      dictionaryObj: null,\n      selectedEntities: [],\n      high_text: null,\n      loaded: false,\n      colors: [],\n      high_entities: [],\n      available_configs: [],\n      config_to_change: null\n    };\n  },\n  methods: {\n    uploadFile() {\n      let formData = new FormData();\n      formData.append(\"file\", this.$refs.file.files[0]);\n      formData.append(\"language\", this.language);\n      let file = this.$refs.file.files[0];\n      if (file.type === \"application/pdf\") {\n        axios.post(\"http://localhost:8000/api/pdf-upload/\", formData).then(response => {\n          if (this.language == 'it') {\n            this.text = response.data.pdf_text_it;\n            this.txt_file = response.data.txt_file_pdf_it;\n          } else {\n            this.text = response.data.pdf_text_en;\n            this.txt_file = response.data.txt_file_pdf_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\n        axios.post(\"http://localhost:8000/api/word-upload/\", formData).then(response => {\n          if (this.language === 'it') {\n            this.text = response.data.docx_text_it;\n            this.txt_file = response.data.txt_file_docx_it;\n          } else {\n            this.text = response.data.docx_text_en;\n            this.txt_file = response.data.txt_file_docx_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        axios.post(\"http://localhost:8000/api/xlsx-upload/\", formData).then(response => {\n          if (this.language === 'it') {\n            this.text = response.data.xlsx_text_it;\n            this.txt_file = response.data.txt_file_xlsx_it;\n          } else {\n            this.text = response.data.xlsx_text_en;\n            this.txt_file = response.data.txt_file_xlsx_en;\n          }\n          this.file_uploaded = response.data.title;\n        }).catch(error => {\n          console.log(error);\n          alert(error);\n        });\n      } else {\n        alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\n      }\n      axios.post(\"http://localhost:8000/api/get-config/\").then(response => {\n        this.available_configs = response.data.configs;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    updateText() {\n      axios.post(\"http://localhost:8000/api/update-text/\", {\n        text_toEdit: this.editText,\n        file_toEdit: this.txt_file,\n        file_source: this.file_uploaded,\n        language: this.language\n      }).then(response => {\n        this.text = this.editText;\n        this.txt_file = response.data.txt_file_edited;\n        this.editing = false;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    loadCnf() {\n      axios.post(\"http://localhost:8000/api/load-config/\", {\n        file_txt_path: this.txt_file,\n        language: this.language,\n        text: this.text,\n        f_up: this.file_uploaded\n      }).then(response => {\n        this.dictionaryObj = JSON.parse(response.data.jsonner_str);\n        this.loaded = true;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    },\n    filter() {\n      axios.post(\"http://localhost:8000/api/filter/\", {\n        file_txt_path: this.txt_file,\n        language: this.language,\n        text: this.text,\n        selectedEn: this.selectedEntities\n      }).then(response => {\n        this.high_text = response.data.high;\n        this.filtered = true;\n        this.colors = response.data.colors;\n        this.high_entities = response.data.ent;\n      }).catch(error => {\n        console.log(error);\n        alert(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","text","txt_file","editing","editText","file_uploaded","language","dictionaryObj","selectedEntities","high_text","loaded","colors","high_entities","available_configs","config_to_change","methods","uploadFile","formData","FormData","append","$refs","file","files","type","post","then","response","pdf_text_it","txt_file_pdf_it","pdf_text_en","txt_file_pdf_en","title","catch","error","console","log","alert","docx_text_it","txt_file_docx_it","docx_text_en","txt_file_docx_en","xlsx_text_it","txt_file_xlsx_it","xlsx_text_en","txt_file_xlsx_en","configs","updateText","text_toEdit","file_toEdit","file_source","txt_file_edited","loadCnf","file_txt_path","f_up","JSON","parse","jsonner_str","filter","selectedEn","high","filtered","ent"],"sources":["src/components/UploadEdit.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <form @submit.prevent=\"uploadFile\"> \r\n            <input type=\"file\" ref=\"file\" accept=\".pdf,.docx, .xlsx\" />\r\n            <div>\r\n                    <label for=\"language-select\">Select language:</label>\r\n                    <select id=\"language-select\" v-model=\"language\">\r\n                        <option value=\"en\">English</option>\r\n                        <option value=\"it\">Italian</option>\r\n                    </select>\r\n                </div>\r\n            <button type=\"submit\" @click=\"dictionaryObj=null; selectedEntities = []; loaded=false\">Upload</button>\r\n        </form>\r\n        \r\n        <div v-if=\"text\">\r\n            <h2>Extracted text</h2>\r\n            <div>\r\n                \r\n                <textarea v-if=\"!editing & !high_text\" v-model=\"text\" style=\"width: 50%; height: 300px;\" readonly></textarea>\r\n                <textarea v-else-if=\"editing & !high_text\" v-model=\"editText\" style=\"width: 50%; height: 300px;\"></textarea>\r\n                <div v-if=\"high_text\" v-html=\"high_text\" contenteditable=\"false\" style=\"width: 50%; height: 300px; overflow: auto;\"></div>\r\n                <button v-if=\"high_text\" @click=\"high_text = null, selectedEntities = [], colors = []\">Reset</button>\r\n\r\n                <div v-if=\"colors.length > 0\">\r\n                    <div v-for=\"(color, index) in colors \" :key=\"index\" class=\"color-box\" :style=\"{ backgroundColor: color }\">\r\n                        {{ high_entities[index] }}\r\n                    </div>\r\n                        \r\n                </div> \r\n\r\n            </div>\r\n            \r\n            <div>\r\n                <button v-if=\"!editing & !high_text\" @click=\"editText = text; editing = true\">Edit</button>\r\n                <button v-if=\"editing\" @click=\"updateText\">Save</button>\r\n                <button v-if=\"editing\" @click=\"editing = false\">Cancel</button>   \r\n\r\n            </div>\r\n            \r\n            <div v-if=\"loaded==true\">\r\n                    \r\n\r\n                    <form @submit.prevent=\"changeConfig\"> \r\n                        \r\n                        <div>\r\n                                <label for=\"cnf-select\">Available configuration:</label>\r\n                                <select id=\"cnf-select\" v-model=\"config_to_change\">\r\n                                    <option value=conf  v-for=\"conf in available_configs\" :key=\"conf\">{{ conf }} </option>                                     \r\n                                </select>\r\n                            </div>\r\n                        <button type=\"submit\" @click=\"dictionaryObj = null; selectedEntities = []\">Change CNF</button>\r\n                    </form>\r\n                    \r\n                    <div v-if=\"dictionaryObj\">\r\n                        <table>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Entity</th>\r\n                                <th>Question</th>\r\n                                <th>Select</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            <tr v-for=\"(value, key) in dictionaryObj\" :key=\"key\">\r\n                                <td>{{ key }}</td>\r\n                                <td>{{ value }}</td>\r\n                                <td>\r\n                                <input type=\"checkbox\" v-model=\"selectedEntities\" :value=\"key\">\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        \r\n                        <div v-if=\"selectedEntities.length > 0\">\r\n                            <h3>Selected Entities:</h3>\r\n                            <ul>\r\n                                <li v-for=\"entity in selectedEntities\" :key=\"entity\">{{ entity }}</li>\r\n                            </ul>                            \r\n                            \r\n                            \r\n                            <button @click=\"filter\">Filter</button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n            </div>\r\n            <button v-else @click=\"loadCnf\">Load CNF (last used)</button>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"; /* a Javascript library used to make HTTP requests from node. js;  It can be used intercept HTTP requests and responses  */\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            text: null,\r\n            txt_file: null,\r\n            editing: false,\r\n            editText: null,\r\n            file_uploaded: null,\r\n            language: \"it\",\r\n            dictionaryObj: null,\r\n            selectedEntities : [],\r\n            high_text: null,\r\n            loaded : false,\r\n            colors : [],\r\n            high_entities : [],\r\n            available_configs: [],\r\n            config_to_change: null\r\n        };\r\n    },\r\n    methods: {\r\n        uploadFile() {\r\n            \r\n            let formData = new FormData();\r\n            formData.append(\"file\", this.$refs.file.files[0]);\r\n            formData.append(\"language\", this.language);\r\n\r\n            let file = this.$refs.file.files[0];\r\n\r\n            if (file.type === \"application/pdf\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/pdf-upload/\", formData)\r\n                    .then(response => {\r\n                        \r\n                        if(this.language == 'it'){\r\n                            this.text = response.data.pdf_text_it\r\n                            this.txt_file = response.data.txt_file_pdf_it\r\n                        }else{\r\n                            this.text = response.data.pdf_text_en\r\n                            this.txt_file = response.data.txt_file_pdf_en\r\n                        }\r\n\r\n                        this.file_uploaded = response.data.title\r\n\r\n                        \r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type === \"application/msword\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/word-upload/\", formData)\r\n                    .then(response => {\r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.docx_text_it\r\n                            this.txt_file = response.data.txt_file_docx_it\r\n                        } else {\r\n                            this.text = response.data.docx_text_en\r\n                            this.txt_file = response.data.txt_file_docx_en\r\n\r\n                        }\r\n\r\n                        this.file_uploaded = response.data.title\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\r\n                axios\r\n                    .post(\"http://localhost:8000/api/xlsx-upload/\", formData)\r\n                    .then(response => {\r\n                        \r\n                        if (this.language === 'it') {\r\n                            this.text = response.data.xlsx_text_it\r\n                            this.txt_file = response.data.txt_file_xlsx_it\r\n                        } else {\r\n                            this.text = response.data.xlsx_text_en\r\n                            this.txt_file = response.data.txt_file_xlsx_en\r\n                        }\r\n                        this.file_uploaded = response.data.title\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        alert(error);\r\n                    });\r\n            } else {\r\n                alert(\"Unsupported file type: only .pdf, .docx or .xlsx !!!\");\r\n            }\r\n            axios.post(\"http://localhost:8000/api/get-config/\")\r\n                .then(response => {\r\n                    this.available_configs = response.data.configs;\r\n                }).catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n        updateText() {\r\n            axios.post(\"http://localhost:8000/api/update-text/\", { text_toEdit: this.editText, file_toEdit: this.txt_file, file_source: this.file_uploaded, language: this.language})\r\n                .then(response => {\r\n                    this.text = this.editText;\r\n                    this.txt_file = response.data.txt_file_edited;\r\n                    this.editing = false;                    \r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n                });\r\n        },\r\n\r\n        loadCnf(){\r\n            axios.post(\"http://localhost:8000/api/load-config/\", {file_txt_path: this.txt_file, language: this.language, text: this.text, f_up: this.file_uploaded})\r\n            .then(response => {\r\n                this.dictionaryObj = JSON.parse(response.data.jsonner_str);\r\n                this.loaded = true\r\n                \r\n            })\r\n            .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n            });\r\n            \r\n        },\r\n\r\n        filter(){\r\n            axios.post(\"http://localhost:8000/api/filter/\", {file_txt_path: this.txt_file, language: this.language, text: this.text, selectedEn: this.selectedEntities})\r\n            .then(response =>{\r\n                this.high_text = response.data.high;\r\n                this.filtered = true;\r\n                this.colors = response.data.colors;\r\n                this.high_entities = response.data.ent;\r\n            })\r\n            .catch(error => {\r\n                    console.log(error);\r\n                    alert(error);\r\n            });\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.color-box {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin: 5px;\r\n    display: inline-block;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}